{"ast":null,"code":"var _s = $RefreshSig$();\n\n/**\r\n * @prettier\r\n */\n\n/*hook to get results\r\nthis hook is needed as we will use in allResults page and in context store\r\nUsing it in context store ensusre that /electio/:address only displays if the \r\nelection address was created using our currentFactory contract address\r\n\r\n*/\nimport { useEffect, useContext } from 'react';\nimport Factory from '../../ethereum/factory';\nimport AuthContext from '../../store/auth-context';\nexport const useGetResults = setLoading => {\n  _s();\n\n  const {\n    setResults,\n    setNames,\n    notify\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const b = async () => {\n      setLoading(true); //get all results\n\n      try {\n        let electionResults = await Factory.methods.getAllResults().call();\n        let electionNames = await Factory.methods.getAllName().call();\n        setResults(electionResults);\n        setNames(electionNames);\n      } catch (err) {\n        notify(err.message, 'error');\n      }\n\n      setLoading(false);\n    };\n\n    b();\n    return () => b;\n  }, []);\n};\n\n_s(useGetResults, \"DTNy29VKy6g+lNTZ6/+l8HY7eAs=\");","map":{"version":3,"sources":["D:/Blockchain Ballot/frontend/src/components/hooks/get-results.js"],"names":["useEffect","useContext","Factory","AuthContext","useGetResults","setLoading","setResults","setNames","notify","b","electionResults","methods","getAllResults","call","electionNames","getAllName","err","message"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,MAAMC,aAAa,GAAIC,UAAD,IAAgB;AAAA;;AAC1C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAmCP,UAAU,CAACE,WAAD,CAAnD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMS,CAAC,GAAG,YAAY;AACnBJ,MAAAA,UAAU,CAAC,IAAD,CAAV,CADmB,CAEnB;;AACA,UAAI;AACD,YAAIK,eAAe,GAAG,MAAMR,OAAO,CAACS,OAAR,CAAgBC,aAAhB,GAAgCC,IAAhC,EAA5B;AACA,YAAIC,aAAa,GAAG,MAAMZ,OAAO,CAACS,OAAR,CAAgBI,UAAhB,GAA6BF,IAA7B,EAA1B;AACAP,QAAAA,UAAU,CAACI,eAAD,CAAV;AACAH,QAAAA,QAAQ,CAACO,aAAD,CAAR;AACF,OALD,CAKE,OAAOE,GAAP,EAAY;AACXR,QAAAA,MAAM,CAACQ,GAAG,CAACC,OAAL,EAAc,OAAd,CAAN;AACF;;AACDZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KAZD;;AAaAI,IAAAA,CAAC;AACD,WAAO,MAAMA,CAAb;AACF,GAhBQ,EAgBN,EAhBM,CAAT;AAiBF,CApBM;;GAAML,a","sourcesContent":["/**\r\n * @prettier\r\n */\r\n\r\n/*hook to get results\r\nthis hook is needed as we will use in allResults page and in context store\r\nUsing it in context store ensusre that /electio/:address only displays if the \r\nelection address was created using our currentFactory contract address\r\n\r\n*/\r\n\r\nimport { useEffect, useContext } from 'react';\r\nimport Factory from '../../ethereum/factory';\r\nimport AuthContext from '../../store/auth-context';\r\nexport const useGetResults = (setLoading) => {\r\n   const { setResults, setNames, notify } = useContext(AuthContext);\r\n\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         setLoading(true);\r\n         //get all results\r\n         try {\r\n            let electionResults = await Factory.methods.getAllResults().call();\r\n            let electionNames = await Factory.methods.getAllName().call();\r\n            setResults(electionResults);\r\n            setNames(electionNames);\r\n         } catch (err) {\r\n            notify(err.message, 'error');\r\n         }\r\n         setLoading(false);\r\n      };\r\n      b();\r\n      return () => b;\r\n   }, []);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}