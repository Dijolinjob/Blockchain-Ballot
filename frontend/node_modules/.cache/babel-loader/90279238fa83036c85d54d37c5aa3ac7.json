{"ast":null,"code":"var _s = $RefreshSig$();\n\n/**\r\n * @prettier\r\n */\nimport { useContext, useEffect } from 'react';\nimport Electioneth from '../../ethereum/election';\nimport Factory from '../../ethereum/factory';\nimport web3 from '../../ethereum/web3';\nimport { useNavigate } from 'react-router';\nimport axios from 'axios';\nimport AuthContext from '../../store/auth-context';\nexport const useEndElection = (page, setLoading) => {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    notify,\n    election,\n    setUser,\n    setElection\n  } = useContext(AuthContext); //use effect to remove bug where user rejects second transaction while ending election\n\n  useEffect(() => {\n    (async () => {\n      if (election !== '0x0000000000000000000000000000000000000000') {\n        setLoading(true);\n        const Election = Electioneth(election);\n        const accounts = await web3.eth.getAccounts();\n        let started = await Election.methods.started().call();\n        let ended = await Election.methods.ended().call(); //checking if correct election has ended\n\n        if (!started && ended) {\n          //removing election from factory\n          try {\n            await Factory.methods.clearFactory().send({\n              from: accounts[0]\n            });\n            notify('Election has ended', 'success');\n          } catch (err) {\n            notify('You need to end the election to proceed', 'error');\n            navigate('/');\n            return;\n          } //changing electionOngoing to false and hasVoted to false\n\n\n          try {\n            setLoading(true);\n            await axios.put('/election/endElection', {\n              address: election\n            }, {\n              withCredentials: true\n            }); //get updated user back\n\n            const response = await axios.get('/election/getUser', {\n              withCredentials: true\n            });\n            console.log(response.data.user);\n            setUser(response.data.user);\n            setElection('0x0000000000000000000000000000000000000000');\n            if (page === 'election') navigate(`/`);else navigate('/election');\n          } catch (err) {\n            notify(err.response.data.errMessage, 'error');\n            setLoading(false);\n            return;\n          }\n        }\n\n        setLoading(false);\n      }\n    })();\n  }, []);\n};\n\n_s(useEndElection, \"M+klCqoOx/ghi8WsvLRhdUJd+3k=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"sources":["D:/Blockchain Ballot/frontend/src/components/hooks/end-election.js"],"names":["useContext","useEffect","Electioneth","Factory","web3","useNavigate","axios","AuthContext","useEndElection","page","setLoading","navigate","notify","election","setUser","setElection","Election","accounts","eth","getAccounts","started","methods","call","ended","clearFactory","send","from","err","put","address","withCredentials","response","get","console","log","data","user","errMessage"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAAA;;AACjD,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAA6Cf,UAAU,CAACO,WAAD,CAA7D,CAFiD,CAGjD;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACb,KAAC,YAAY;AACV,UAAIY,QAAQ,KAAK,4CAAjB,EAA+D;AAC5DH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMM,QAAQ,GAAGd,WAAW,CAACW,QAAD,CAA5B;AACA,cAAMI,QAAQ,GAAG,MAAMb,IAAI,CAACc,GAAL,CAASC,WAAT,EAAvB;AACA,YAAIC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiBD,OAAjB,GAA2BE,IAA3B,EAApB;AACA,YAAIC,KAAK,GAAG,MAAMP,QAAQ,CAACK,OAAT,CAAiBE,KAAjB,GAAyBD,IAAzB,EAAlB,CAL4D,CAM5D;;AACA,YAAI,CAACF,OAAD,IAAYG,KAAhB,EAAuB;AACpB;AACA,cAAI;AACD,kBAAMpB,OAAO,CAACkB,OAAR,CAAgBG,YAAhB,GAA+BC,IAA/B,CAAoC;AACvCC,cAAAA,IAAI,EAAET,QAAQ,CAAC,CAAD;AADyB,aAApC,CAAN;AAGAL,YAAAA,MAAM,CAAC,oBAAD,EAAuB,SAAvB,CAAN;AACF,WALD,CAKE,OAAOe,GAAP,EAAY;AACXf,YAAAA,MAAM,CAAC,yCAAD,EAA4C,OAA5C,CAAN;AACAD,YAAAA,QAAQ,CAAC,GAAD,CAAR;AACA;AACF,WAXmB,CAapB;;;AACA,cAAI;AACDD,YAAAA,UAAU,CAAC,IAAD,CAAV;AACA,kBAAMJ,KAAK,CAACsB,GAAN,CACH,uBADG,EAEH;AACGC,cAAAA,OAAO,EAAEhB;AADZ,aAFG,EAKH;AACGiB,cAAAA,eAAe,EAAE;AADpB,aALG,CAAN,CAFC,CAWD;;AACA,kBAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,mBAAV,EAA+B;AACnDF,cAAAA,eAAe,EAAE;AADkC,aAA/B,CAAvB;AAGAG,YAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,CAAcC,IAA1B;AACAtB,YAAAA,OAAO,CAACiB,QAAQ,CAACI,IAAT,CAAcC,IAAf,CAAP;AACArB,YAAAA,WAAW,CAAC,4CAAD,CAAX;AACA,gBAAIN,IAAI,KAAK,UAAb,EAAyBE,QAAQ,CAAE,GAAF,CAAR,CAAzB,KACKA,QAAQ,CAAC,WAAD,CAAR;AACP,WApBD,CAoBE,OAAOgB,GAAP,EAAY;AACXf,YAAAA,MAAM,CAACe,GAAG,CAACI,QAAJ,CAAaI,IAAb,CAAkBE,UAAnB,EAA+B,OAA/B,CAAN;AACA3B,YAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACF;AACH;;AACDA,QAAAA,UAAU,CAAC,KAAD,CAAV;AACF;AACH,KAlDD;AAmDF,GApDQ,EAoDN,EApDM,CAAT;AAqDF,CAzDM;;GAAMF,c;UACOH,W","sourcesContent":["/**\r\n * @prettier\r\n */\r\nimport { useContext, useEffect } from 'react';\r\nimport Electioneth from '../../ethereum/election';\r\nimport Factory from '../../ethereum/factory';\r\nimport web3 from '../../ethereum/web3';\r\nimport { useNavigate } from 'react-router';\r\nimport axios from 'axios';\r\nimport AuthContext from '../../store/auth-context';\r\n\r\nexport const useEndElection = (page, setLoading) => {\r\n   const navigate = useNavigate();\r\n   const { notify, election, setUser, setElection } = useContext(AuthContext);\r\n   //use effect to remove bug where user rejects second transaction while ending election\r\n   useEffect(() => {\r\n      (async () => {\r\n         if (election !== '0x0000000000000000000000000000000000000000') {\r\n            setLoading(true);\r\n            const Election = Electioneth(election);\r\n            const accounts = await web3.eth.getAccounts();\r\n            let started = await Election.methods.started().call();\r\n            let ended = await Election.methods.ended().call();\r\n            //checking if correct election has ended\r\n            if (!started && ended) {\r\n               //removing election from factory\r\n               try {\r\n                  await Factory.methods.clearFactory().send({\r\n                     from: accounts[0],\r\n                  });\r\n                  notify('Election has ended', 'success');\r\n               } catch (err) {\r\n                  notify('You need to end the election to proceed', 'error');\r\n                  navigate('/');\r\n                  return;\r\n               }\r\n\r\n               //changing electionOngoing to false and hasVoted to false\r\n               try {\r\n                  setLoading(true);\r\n                  await axios.put(\r\n                     '/election/endElection',\r\n                     {\r\n                        address: election,\r\n                     },\r\n                     {\r\n                        withCredentials: true,\r\n                     }\r\n                  );\r\n                  //get updated user back\r\n                  const response = await axios.get('/election/getUser', {\r\n                     withCredentials: true,\r\n                  });\r\n                  console.log(response.data.user);\r\n                  setUser(response.data.user);\r\n                  setElection('0x0000000000000000000000000000000000000000');\r\n                  if (page === 'election') navigate(`/`);\r\n                  else navigate('/election');\r\n               } catch (err) {\r\n                  notify(err.response.data.errMessage, 'error');\r\n                  setLoading(false);\r\n                  return;\r\n               }\r\n            }\r\n            setLoading(false);\r\n         }\r\n      })();\r\n   }, []);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}