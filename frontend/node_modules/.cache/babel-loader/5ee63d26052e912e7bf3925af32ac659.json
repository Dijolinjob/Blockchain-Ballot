{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain Ballot\\\\frontend\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * @prettier\r\n */\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport React from 'react';\nimport Loading from '../components/Loading';\nimport factory from '../ethereum/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  user: {},\n  //get user\n  election: '',\n  //get election address\n  loading: false,\n  //check if its loading\n  validAccount: false,\n  //check if user is using correct ethereum account\n  setUser: () => {},\n  //changes user value\n  notify: () => {},\n  //for snackbar\n  getAccount: () => {},\n  //to change valid account value\n  setElection: () => {},\n  // to change election address\n  results: [],\n  //to store all election results address, so if user\n  //directly goes to /results/address, we have data to compare if its not a fake address\n  setResults: () => {},\n  //to change election results\n  names: [],\n  //Store all election names\n  setNames: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [user, setUser] = useState();\n  const [loading, setLoading] = useState(false);\n  const [validAccount, setValidAccount] = useState(false);\n  const [election, setElection] = useState('0x0000000000000000000000000000000000000000');\n  const [names, setNames] = useState([]); //whenever user changes ethereum account, this function runs\n\n  window.ethereum && window.ethereum.on('accountsChanged', function (accounts) {\n    getAccount();\n  }); //To get intial address of all previous elections\n  //useGetResults(setLoading);\n  //to check if metamask is installed\n\n  useEffect(() => {\n    const c = async () => {\n      if (!window.ethereum) {\n        alert('Please Intall metamask');\n        window.location.href = 'https://metamask.io/';\n      }\n    };\n\n    c();\n    return () => c;\n  }); //to set setValidAccount value\n  // useEffect(() => {\n  //    getAccount();\n  // }, []);\n  //function to make sure user is using correct ethereum account\n\n  async function getAccount() {\n    setLoading(false); //getting current account\n\n    try {\n      const accounts = await window.ethereum.enable();\n\n      if (user) {\n        //accounts = await web3.eth.getAccounts()\n        if (accounts[0] && user.eAddress) setValidAccount(accounts[0].toUpperCase() === user.eAddress.toUpperCase());\n      }\n    } catch (err) {\n      alert('Login metamask');\n      window.location.href = 'https://metamask.io/';\n    }\n  } //this use effect is to get user data from http cookie\n\n\n  useEffect(() => {\n    const b = async () => {\n      setLoading(true);\n\n      try {\n        const response = await axios.get('/election/getUser', {\n          withCredentials: true\n        });\n        setUser(response.data.user);\n      } catch (err) {} // const accounts = await web3.eth.getAccounts();\n      // account = accounts[0]\n\n    };\n\n    b();\n    setLoading(false);\n    return () => b;\n  }, [setUser]); // this use effect is to get deployed election\n\n  useEffect(() => {\n    const getAddress = async () => {\n      setLoading(true);\n      let address;\n\n      try {\n        address = await factory.methods.deployedElection().call();\n        setElection(address);\n      } catch (err) {\n        notify(err, 'error');\n      }\n\n      setLoading(false);\n    };\n\n    getAddress();\n    return () => getAddress;\n  }, []); //react notifier\n\n  const notify = (message, status) => {\n    switch (status) {\n      case 'error':\n        toast.error(message, {\n          autoClose: 3000,\n          position: toast.POSITION.BOTTOM_RIGHT\n        });\n        break;\n\n      case 'success':\n        toast.success(message, {\n          autoClose: 3000,\n          position: toast.POSITION.BOTTOM_RIGHT\n        });\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!loading && /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user: user,\n        setUser: setUser,\n        notify: notify,\n        getAccount: getAccount,\n        election: election,\n        loading: loading,\n        validAccount: validAccount,\n        setElection: setElection,\n        results,\n        setResults,\n        names,\n        setNames\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AuthContextProvider, \"LAam0ny0xNt4BklHE43pQsHAC3o=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/Blockchain Ballot/frontend/src/store/auth-context.js"],"names":["useState","useEffect","axios","toast","React","Loading","factory","AuthContext","createContext","user","election","loading","validAccount","setUser","notify","getAccount","setElection","results","setResults","names","setNames","AuthContextProvider","props","setLoading","setValidAccount","window","ethereum","on","accounts","c","alert","location","href","enable","eAddress","toUpperCase","err","b","response","get","withCredentials","data","getAddress","address","methods","deployedElection","call","message","status","error","autoClose","position","POSITION","BOTTOM_RIGHT","success","children"],"mappings":";;;AAAA;AACA;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACrCC,EAAAA,IAAI,EAAE,EAD+B;AAC3B;AACVC,EAAAA,QAAQ,EAAE,EAF2B;AAEvB;AACdC,EAAAA,OAAO,EAAE,KAH4B;AAGrB;AAChBC,EAAAA,YAAY,EAAE,KAJuB;AAIhB;AACrBC,EAAAA,OAAO,EAAE,MAAM,CAAE,CALoB;AAKlB;AACnBC,EAAAA,MAAM,EAAE,MAAM,CAAE,CANqB;AAMnB;AAClBC,EAAAA,UAAU,EAAE,MAAM,CAAE,CAPiB;AAOf;AACtBC,EAAAA,WAAW,EAAE,MAAM,CAAE,CARgB;AAQd;AACvBC,EAAAA,OAAO,EAAE,EAT4B;AASxB;AACb;AACAC,EAAAA,UAAU,EAAE,MAAM,CAAE,CAXiB;AAWf;AACtBC,EAAAA,KAAK,EAAE,EAZ8B;AAY1B;AACXC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAbmB,CAApB,CAApB;AAgBA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC3C,QAAM,CAACL,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,IAAD,EAAOI,OAAP,IAAkBb,QAAQ,EAAhC;AACA,QAAM,CAACW,OAAD,EAAUY,UAAV,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACY,YAAD,EAAeY,eAAf,IAAkCxB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACU,QAAD,EAAWM,WAAX,IAA0BhB,QAAQ,CAAC,4CAAD,CAAxC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC,CAN2C,CAO3C;;AACAyB,EAAAA,MAAM,CAACC,QAAP,IACGD,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,UAAUC,QAAV,EAAoB;AACvDb,IAAAA,UAAU;AACZ,GAFD,CADH,CAR2C,CAa3C;AACA;AACA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACb,UAAM4B,CAAC,GAAG,YAAY;AACnB,UAAI,CAACJ,MAAM,CAACC,QAAZ,EAAsB;AACnBI,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACAL,QAAAA,MAAM,CAACM,QAAP,CAAgBC,IAAhB,GAAuB,sBAAvB;AACF;AACH,KALD;;AAMAH,IAAAA,CAAC;AACD,WAAO,MAAMA,CAAb;AACF,GATQ,CAAT,CAhB2C,CA0B3C;AACA;AACA;AACA;AACA;;AACA,iBAAed,UAAf,GAA4B;AACzBQ,IAAAA,UAAU,CAAC,KAAD,CAAV,CADyB,CAEzB;;AACA,QAAI;AACD,YAAMK,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAP,CAAgBO,MAAhB,EAAvB;;AACA,UAAIxB,IAAJ,EAAU;AACP;AAEA,YAAImB,QAAQ,CAAC,CAAD,CAAR,IAAenB,IAAI,CAACyB,QAAxB,EACGV,eAAe,CAACI,QAAQ,CAAC,CAAD,CAAR,CAAYO,WAAZ,OAA8B1B,IAAI,CAACyB,QAAL,CAAcC,WAAd,EAA/B,CAAf;AACL;AACH,KARD,CAQE,OAAOC,GAAP,EAAY;AACXN,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACAL,MAAAA,MAAM,CAACM,QAAP,CAAgBC,IAAhB,GAAuB,sBAAvB;AACF;AACH,GA9C0C,CA+C3C;;;AACA/B,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMoC,CAAC,GAAG,YAAY;AACnBd,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACD,cAAMe,QAAQ,GAAG,MAAMpC,KAAK,CAACqC,GAAN,CAAU,mBAAV,EAA+B;AACnDC,UAAAA,eAAe,EAAE;AADkC,SAA/B,CAAvB;AAGA3B,QAAAA,OAAO,CAACyB,QAAQ,CAACG,IAAT,CAAchC,IAAf,CAAP;AACF,OALD,CAKE,OAAO2B,GAAP,EAAY,CAAE,CAPG,CASnB;AACA;;AACF,KAXD;;AAYAC,IAAAA,CAAC;AACDd,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,WAAO,MAAMc,CAAb;AACF,GAhBQ,EAgBN,CAACxB,OAAD,CAhBM,CAAT,CAhD2C,CAkE3C;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMyC,UAAU,GAAG,YAAY;AAC5BnB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAIoB,OAAJ;;AACA,UAAI;AACDA,QAAAA,OAAO,GAAG,MAAMrC,OAAO,CAACsC,OAAR,CAAgBC,gBAAhB,GAAmCC,IAAnC,EAAhB;AACA9B,QAAAA,WAAW,CAAC2B,OAAD,CAAX;AACF,OAHD,CAGE,OAAOP,GAAP,EAAY;AACXtB,QAAAA,MAAM,CAACsB,GAAD,EAAM,OAAN,CAAN;AACF;;AACDb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KAVD;;AAWAmB,IAAAA,UAAU;AACV,WAAO,MAAMA,UAAb;AACF,GAdQ,EAcN,EAdM,CAAT,CAnE2C,CAmF3C;;AACA,QAAM5B,MAAM,GAAG,CAACiC,OAAD,EAAUC,MAAV,KAAqB;AACjC,YAAQA,MAAR;AACG,WAAK,OAAL;AACG7C,QAAAA,KAAK,CAAC8C,KAAN,CAAYF,OAAZ,EAAqB;AAClBG,UAAAA,SAAS,EAAE,IADO;AAElBC,UAAAA,QAAQ,EAAEhD,KAAK,CAACiD,QAAN,CAAeC;AAFP,SAArB;AAIA;;AAEH,WAAK,SAAL;AACGlD,QAAAA,KAAK,CAACmD,OAAN,CAAcP,OAAd,EAAuB;AACpBG,UAAAA,SAAS,EAAE,IADS;AAEpBC,UAAAA,QAAQ,EAAEhD,KAAK,CAACiD,QAAN,CAAeC;AAFL,SAAvB;AAIA;AAbN;AAeF,GAhBD;;AAiBA,sBACG;AAAA,eACI,CAAC1C,OAAD,iBACE,QAAC,WAAD,CAAa,QAAb;AACG,MAAA,KAAK,EAAE;AACJF,QAAAA,IAAI,EAAEA,IADF;AAEJI,QAAAA,OAAO,EAAEA,OAFL;AAGJC,QAAAA,MAAM,EAAEA,MAHJ;AAIJC,QAAAA,UAAU,EAAEA,UAJR;AAKJL,QAAAA,QAAQ,EAAEA,QALN;AAMJC,QAAAA,OAAO,EAAEA,OANL;AAOJC,QAAAA,YAAY,EAAEA,YAPV;AAQJI,QAAAA,WAAW,EAAEA,WART;AASJC,QAAAA,OATI;AAUJC,QAAAA,UAVI;AAWJC,QAAAA,KAXI;AAYJC,QAAAA;AAZI,OADV;AAAA,gBAgBIE,KAAK,CAACiC;AAhBV;AAAA;AAAA;AAAA;AAAA,YAFN,EAqBI5C,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YArBf;AAAA,kBADH;AAyBF,CA9HM;;GAAMU,mB;;KAAAA,mB;AAgIb,eAAed,WAAf","sourcesContent":["/**\r\n * @prettier\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport React from 'react';\r\nimport Loading from '../components/Loading';\r\nimport factory from '../ethereum/factory';\r\n\r\nconst AuthContext = React.createContext({\r\n   user: {}, //get user\r\n   election: '', //get election address\r\n   loading: false, //check if its loading\r\n   validAccount: false, //check if user is using correct ethereum account\r\n   setUser: () => {}, //changes user value\r\n   notify: () => {}, //for snackbar\r\n   getAccount: () => {}, //to change valid account value\r\n   setElection: () => {}, // to change election address\r\n   results: [], //to store all election results address, so if user\r\n   //directly goes to /results/address, we have data to compare if its not a fake address\r\n   setResults: () => {}, //to change election results\r\n   names: [], //Store all election names\r\n   setNames: () => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n   const [results, setResults] = useState([]);\r\n   const [user, setUser] = useState();\r\n   const [loading, setLoading] = useState(false);\r\n   const [validAccount, setValidAccount] = useState(false);\r\n   const [election, setElection] = useState('0x0000000000000000000000000000000000000000');\r\n   const [names, setNames] = useState([]);\r\n   //whenever user changes ethereum account, this function runs\r\n   window.ethereum &&\r\n      window.ethereum.on('accountsChanged', function (accounts) {\r\n         getAccount();\r\n      });\r\n\r\n   //To get intial address of all previous elections\r\n   //useGetResults(setLoading);\r\n   //to check if metamask is installed\r\n   useEffect(() => {\r\n      const c = async () => {\r\n         if (!window.ethereum) {\r\n            alert('Please Intall metamask');\r\n            window.location.href = 'https://metamask.io/';\r\n         }\r\n      };\r\n      c();\r\n      return () => c;\r\n   });\r\n   //to set setValidAccount value\r\n   // useEffect(() => {\r\n   //    getAccount();\r\n   // }, []);\r\n   //function to make sure user is using correct ethereum account\r\n   async function getAccount() {\r\n      setLoading(false);\r\n      //getting current account\r\n      try {\r\n         const accounts = await window.ethereum.enable();\r\n         if (user) {\r\n            //accounts = await web3.eth.getAccounts()\r\n\r\n            if (accounts[0] && user.eAddress)\r\n               setValidAccount(accounts[0].toUpperCase() === user.eAddress.toUpperCase());\r\n         }\r\n      } catch (err) {\r\n         alert('Login metamask');\r\n         window.location.href = 'https://metamask.io/';\r\n      }\r\n   }\r\n   //this use effect is to get user data from http cookie\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         setLoading(true);\r\n         try {\r\n            const response = await axios.get('/election/getUser', {\r\n               withCredentials: true,\r\n            });\r\n            setUser(response.data.user);\r\n         } catch (err) {}\r\n\r\n         // const accounts = await web3.eth.getAccounts();\r\n         // account = accounts[0]\r\n      };\r\n      b();\r\n      setLoading(false);\r\n      return () => b;\r\n   }, [setUser]);\r\n\r\n   // this use effect is to get deployed election\r\n   useEffect(() => {\r\n      const getAddress = async () => {\r\n         setLoading(true);\r\n         let address;\r\n         try {\r\n            address = await factory.methods.deployedElection().call();\r\n            setElection(address);\r\n         } catch (err) {\r\n            notify(err, 'error');\r\n         }\r\n         setLoading(false);\r\n      };\r\n      getAddress();\r\n      return () => getAddress;\r\n   }, []);\r\n\r\n   //react notifier\r\n   const notify = (message, status) => {\r\n      switch (status) {\r\n         case 'error':\r\n            toast.error(message, {\r\n               autoClose: 3000,\r\n               position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n            break;\r\n\r\n         case 'success':\r\n            toast.success(message, {\r\n               autoClose: 3000,\r\n               position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n            break;\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <AuthContext.Provider\r\n               value={{\r\n                  user: user,\r\n                  setUser: setUser,\r\n                  notify: notify,\r\n                  getAccount: getAccount,\r\n                  election: election,\r\n                  loading: loading,\r\n                  validAccount: validAccount,\r\n                  setElection: setElection,\r\n                  results,\r\n                  setResults,\r\n                  names,\r\n                  setNames,\r\n               }}\r\n            >\r\n               {props.children}\r\n            </AuthContext.Provider>\r\n         )}\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}