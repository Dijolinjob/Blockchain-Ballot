{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain Ballot\\\\frontend\\\\src\\\\pages\\\\SingleResult\\\\SingleResult.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * @prettier\r\n */\nimport { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { useGetResults } from '../../components/hooks/get-results';\nimport Loading from '../../components/Loading';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Electioneth from '../../ethereum/election';\nimport AuthContext from '../../store/auth-context';\nimport ShowResult from './ShowResult';\nimport confetti from 'canvas-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingleResult = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [isDraw, setIsDraw] = useState(false);\n  const [electionName, setElectionName] = useState('');\n  const [candidates, setCandidates] = useState([]);\n  const [candidateCount, setCount] = useState(0);\n  const {\n    address\n  } = useParams();\n  const {\n    notify,\n    results\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  useGetResults(setLoading);\n  useEffect(() => {\n    let b = async () => {\n      //try{\n      setLoading(true); //First check if address by user is from our current election\n\n      if (!results.includes(address)) {\n        navigate(-1);\n        notify('Wrong address', 'error');\n      } else {\n        try {\n          const Election = Electioneth(address); //getting candidate count\n\n          let count = await Election.methods.candidateCount().call();\n          setCount(+count); //getting election name\n\n          let name = await Election.methods.electionName().call();\n          setElectionName(name); //getting all candidates and storing in one variable\n\n          let tempCandidate = await Promise.all(Array(+count).fill(1).map((element, index) => {\n            return Election.methods.candidates(index).call();\n          })); //sort tempCandidates\n\n          tempCandidate.sort((a, b) => b.votes - a.votes); //checking for draw\n\n          if (+count >= 2 && +tempCandidate[0].votes === +tempCandidate[1].votes) {\n            setIsDraw(true);\n          }\n\n          setCandidates(tempCandidate);\n          if (!isDraw && count >= 1) confetti({\n            particleCount: 250\n          });\n        } catch (err) {\n          notify(err.message, 'error');\n        }\n      }\n\n      setLoading(false);\n    };\n\n    b();\n    return () => b = null;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this), !loading && candidateCount === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No candidates found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 47\n    }, this), !loading && candidateCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mt-5 text-center text-3xl font-bold mb-8 text-gray-900\",\n          children: electionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid lg:grid-cols-2 md:grid-cols-2 sm:grid-cols-1 \",\n        children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(ShowResult, {\n          id: index,\n          candidate: candidate,\n          isDraw: isDraw\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 22\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border border-transparent ml-6 py-2 mt-5 w-40 rounded-md text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/results\",\n          children: \" All results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SingleResult, \"wreH6QKVv/+dnP6IwR8KKUS9LFM=\", false, function () {\n  return [useParams, useNavigate, useGetResults];\n});\n\n_c = SingleResult;\nexport default SingleResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleResult\");","map":{"version":3,"sources":["D:/Blockchain Ballot/frontend/src/pages/SingleResult/SingleResult.js"],"names":["useEffect","useState","useContext","useParams","useGetResults","Loading","Link","useNavigate","Electioneth","AuthContext","ShowResult","confetti","SingleResult","loading","setLoading","isDraw","setIsDraw","electionName","setElectionName","candidates","setCandidates","candidateCount","setCount","address","notify","results","navigate","b","includes","Election","count","methods","call","name","tempCandidate","Promise","all","Array","fill","map","element","index","sort","a","votes","particleCount","err","message","candidate"],"mappings":"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","sourcesContent":["/**\r\n * @prettier\r\n */\r\nimport { useEffect, useState, useContext } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useGetResults } from '../../components/hooks/get-results';\r\nimport Loading from '../../components/Loading';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Electioneth from '../../ethereum/election';\r\nimport AuthContext from '../../store/auth-context';\r\nimport ShowResult from './ShowResult';\r\nimport confetti from 'canvas-confetti';\r\nconst SingleResult = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const [isDraw, setIsDraw] = useState(false);\r\n   const [electionName, setElectionName] = useState('');\r\n   const [candidates, setCandidates] = useState([]);\r\n   const [candidateCount, setCount] = useState(0);\r\n   const { address } = useParams();\r\n   const { notify, results } = useContext(AuthContext);\r\n   const navigate = useNavigate();\r\n\r\n   useGetResults(setLoading);\r\n\r\n   useEffect(() => {\r\n      let b = async () => {\r\n         //try{\r\n\r\n         setLoading(true);\r\n         //First check if address by user is from our current election\r\n         if (!results.includes(address)) {\r\n            navigate(-1);\r\n            notify('Wrong address', 'error');\r\n         } else {\r\n            try {\r\n               const Election = Electioneth(address);\r\n               //getting candidate count\r\n               let count = await Election.methods.candidateCount().call();\r\n               setCount(+count);\r\n\r\n               //getting election name\r\n               let name = await Election.methods.electionName().call();\r\n               setElectionName(name);\r\n\r\n               //getting all candidates and storing in one variable\r\n               let tempCandidate = await Promise.all(\r\n                  Array(+count)\r\n                     .fill(1)\r\n                     .map((element, index) => {\r\n                        return Election.methods.candidates(index).call();\r\n                     })\r\n               );\r\n\r\n               //sort tempCandidates\r\n               tempCandidate.sort((a, b) => b.votes - a.votes);\r\n               //checking for draw\r\n               if (+count >= 2 && +tempCandidate[0].votes === +tempCandidate[1].votes) {\r\n                  setIsDraw(true);\r\n               }\r\n\r\n               setCandidates(tempCandidate);\r\n               if (!isDraw && count >= 1)\r\n                  confetti({\r\n                     particleCount: 250,\r\n                  });\r\n            } catch (err) {\r\n               notify(err.message, 'error');\r\n            }\r\n         }\r\n\r\n         setLoading(false);\r\n      };\r\n      b();\r\n      return () => (b = null);\r\n   }, []);\r\n   return (\r\n      <>\r\n         {loading && <Loading />}\r\n         {!loading && candidateCount === 0 && <p>No candidates found</p>}\r\n         {!loading && candidateCount > 0 && (\r\n            <div className='flex flex-col'>\r\n               <div>\r\n                  <h2 className='mt-5 text-center text-3xl font-bold mb-8 text-gray-900'>\r\n                     {electionName}\r\n                  </h2>\r\n               </div>\r\n               <div className='grid lg:grid-cols-2 md:grid-cols-2 sm:grid-cols-1 '>\r\n                  {candidates.map((candidate, index) => (\r\n                     <ShowResult key={index} id={index} candidate={candidate} isDraw={isDraw} />\r\n                  ))}\r\n               </div>\r\n               <button className='border border-transparent ml-6 py-2 mt-5 w-40 rounded-md text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                  <Link to='/results'> All results</Link>\r\n               </button>\r\n            </div>\r\n         )}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SingleResult;\r\n"]},"metadata":{},"sourceType":"module"}