[{"D:\\Blockchain Ballot\\frontend\\src\\index.js":"1","D:\\Blockchain Ballot\\frontend\\src\\App.js":"2","D:\\Blockchain Ballot\\frontend\\src\\store\\auth-context.js":"3","D:\\Blockchain Ballot\\frontend\\src\\pages\\AddElection\\AddElection.js":"4","D:\\Blockchain Ballot\\frontend\\src\\components\\Sidebar.js":"5","D:\\Blockchain Ballot\\frontend\\src\\components\\Layout.js":"6","D:\\Blockchain Ballot\\frontend\\src\\pages\\Login.js":"7","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\Election.js":"8","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllUsers\\AllUser.js":"9","D:\\Blockchain Ballot\\frontend\\src\\pages\\SingleResult\\SingleResult.js":"10","D:\\Blockchain Ballot\\frontend\\src\\pages\\LandingPage\\LandinPage.js":"11","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllResults\\AllResults.js":"12","D:\\Blockchain Ballot\\frontend\\src\\pages\\AddCandidate\\AddCandidate.js":"13","D:\\Blockchain Ballot\\frontend\\src\\pages\\AddUser\\AddUser.js":"14","D:\\Blockchain Ballot\\frontend\\src\\components\\Loading.js":"15","D:\\Blockchain Ballot\\frontend\\src\\pages\\EditUser\\EditUser.js":"16","D:\\Blockchain Ballot\\frontend\\src\\ethereum\\factory.js":"17","D:\\Blockchain Ballot\\frontend\\src\\ethereum\\web3.js":"18","D:\\Blockchain Ballot\\frontend\\src\\ethereum\\election.js":"19","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\ShowCandidate.js":"20","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\EndElection.js":"21","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\StartElection.js":"22","D:\\Blockchain Ballot\\frontend\\src\\pages\\SingleResult\\ShowResult.js":"23","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllUsers\\ShowUser.js":"24","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\get-results.js":"25","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\end-election.js":"26","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\user-validation.js":"27"},{"size":382,"mtime":1684043919276,"results":"28","hashOfConfig":"29"},{"size":1955,"mtime":1684043919208,"results":"30","hashOfConfig":"29"},{"size":4849,"mtime":1684043920492,"results":"31","hashOfConfig":"29"},{"size":4432,"mtime":1684043919863,"results":"32","hashOfConfig":"29"},{"size":17305,"mtime":1684043919392,"results":"33","hashOfConfig":"29"},{"size":16933,"mtime":1684043919321,"results":"34","hashOfConfig":"29"},{"size":7834,"mtime":1684043919773,"results":"35","hashOfConfig":"29"},{"size":5740,"mtime":1684043920167,"results":"36","hashOfConfig":"29"},{"size":5327,"mtime":1684043919994,"results":"37","hashOfConfig":"29"},{"size":3774,"mtime":1684043920441,"results":"38","hashOfConfig":"29"},{"size":5425,"mtime":1684043920350,"results":"39","hashOfConfig":"29"},{"size":4919,"mtime":1684043919950,"results":"40","hashOfConfig":"29"},{"size":7889,"mtime":1684043919818,"results":"41","hashOfConfig":"29"},{"size":7456,"mtime":1684043919905,"results":"42","hashOfConfig":"29"},{"size":385,"mtime":1684043919354,"results":"43","hashOfConfig":"29"},{"size":5991,"mtime":1684043920123,"results":"44","hashOfConfig":"29"},{"size":294,"mtime":1684043919619,"results":"45","hashOfConfig":"29"},{"size":567,"mtime":1684043919659,"results":"46","hashOfConfig":"29"},{"size":193,"mtime":1684043919579,"results":"47","hashOfConfig":"29"},{"size":4366,"mtime":1684043920260,"results":"48","hashOfConfig":"29"},{"size":2432,"mtime":1684043920211,"results":"49","hashOfConfig":"29"},{"size":2229,"mtime":1684043920302,"results":"50","hashOfConfig":"29"},{"size":3775,"mtime":1684043920398,"results":"51","hashOfConfig":"29"},{"size":2500,"mtime":1684043920064,"results":"52","hashOfConfig":"29"},{"size":1086,"mtime":1684043919473,"results":"53","hashOfConfig":"29"},{"size":2705,"mtime":1684043919433,"results":"54","hashOfConfig":"29"},{"size":1674,"mtime":1684043919520,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bno6y",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},"D:\\Blockchain Ballot\\frontend\\src\\index.js",[],"D:\\Blockchain Ballot\\frontend\\src\\App.js",["130"],"/**\r\n * @prettier\r\n */\r\nimport './App.css';\r\nimport Login from './pages/Login';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport SideBar from './components/Sidebar';\r\nimport LandingPage from './pages/LandingPage/LandinPage';\r\nimport Election from './pages/Election/Election';\r\nimport AddElection from './pages/AddElection/AddElection';\r\nimport AddCandidate from './pages/AddCandidate/AddCandidate';\r\nimport AllResults from './pages/AllResults/AllResults';\r\nimport SingleResult from './pages/SingleResult/SingleResult';\r\nimport AllUser from './pages/AllUsers/AllUser';\r\nimport AddUser from './pages/AddUser/AddUser';\r\nimport EditUser from './pages/EditUser/EditUser';\r\nimport axios from 'axios';\r\nimport Layout from './components/Layout';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_BE_URL;\r\n\r\nfunction App() {\r\n   return (\r\n      <BrowserRouter>\r\n         <Layout>\r\n            <Routes>\r\n               <Route path='/' element={<LandingPage />} />\r\n               <Route path='/login' element={<Login />} />\r\n               <Route path='/register' element={<p>Register user</p>} />\r\n               <Route path='/election' element={<Election />} />\r\n               <Route path='/results' element={<AllResults />} />\r\n               <Route path='/results/:address' element={<SingleResult />} />\r\n               <Route path='/users' element={<AllUser />} />\r\n               <Route path='/addUser' element={<AddUser />} />\r\n               <Route path='/addElection' element={<AddElection />} />\r\n               <Route path='/addCandidate' element={<AddCandidate />} />\r\n               <Route path='/editUser' element={<EditUser />} />\r\n               <Route path='/*' element={<p>Wrong page</p>} />\r\n            </Routes>\r\n         </Layout>\r\n         <ToastContainer />\r\n      </BrowserRouter>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","D:\\Blockchain Ballot\\frontend\\src\\store\\auth-context.js",["131"],"/**\r\n * @prettier\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport React from 'react';\r\nimport Loading from '../components/Loading';\r\nimport factory from '../ethereum/factory';\r\n\r\nconst AuthContext = React.createContext({\r\n   user: {}, //get user\r\n   election: '', //get election address\r\n   loading: false, //check if its loading\r\n   validAccount: false, //check if user is using correct ethereum account\r\n   setUser: () => {}, //changes user value\r\n   notify: () => {}, //for snackbar\r\n   getAccount: () => {}, //to change valid account value\r\n   setElection: () => {}, // to change election address\r\n   results: [], //to store all election results address, so if user\r\n   //directly goes to /results/address, we have data to compare if its not a fake address\r\n   setResults: () => {}, //to change election results\r\n   names: [], //Store all election names\r\n   setNames: () => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n   const [results, setResults] = useState([]);\r\n   const [user, setUser] = useState();\r\n   const [loading, setLoading] = useState(false);\r\n   const [validAccount, setValidAccount] = useState(false);\r\n   const [election, setElection] = useState('0x0000000000000000000000000000000000000000');\r\n   const [names, setNames] = useState([]);\r\n   //whenever user changes ethereum account, this function runs\r\n   window.ethereum &&\r\n      window.ethereum.on('accountsChanged', function (accounts) {\r\n         getAccount();\r\n      });\r\n\r\n   //To get intial address of all previous elections\r\n   //useGetResults(setLoading);\r\n   //to check if metamask is installed\r\n   useEffect(() => {\r\n      const c = async () => {\r\n         if (!window.ethereum) {\r\n            alert('Please Intall metamask');\r\n            window.location.href = 'https://metamask.io/';\r\n         }\r\n      };\r\n      c();\r\n      return () => c;\r\n   });\r\n   //to set setValidAccount value\r\n   // useEffect(() => {\r\n   //    getAccount();\r\n   // }, []);\r\n   //function to make sure user is using correct ethereum account\r\n   async function getAccount() {\r\n      setLoading(false);\r\n      //getting current account\r\n      try {\r\n         const accounts = await window.ethereum.enable();\r\n         if (user) {\r\n            //accounts = await web3.eth.getAccounts()\r\n\r\n            if (accounts[0] && user.eAddress)\r\n               setValidAccount(accounts[0].toUpperCase() === user.eAddress.toUpperCase());\r\n         }\r\n      } catch (err) {\r\n         alert('Login metamask');\r\n         window.location.href = 'https://metamask.io/';\r\n      }\r\n   }\r\n   //this use effect is to get user data from http cookie\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         setLoading(true);\r\n         try {\r\n            const response = await axios.get('/election/getUser', {\r\n               withCredentials: true,\r\n            });\r\n            setUser(response.data.user);\r\n         } catch (err) {}\r\n\r\n         // const accounts = await web3.eth.getAccounts();\r\n         // account = accounts[0]\r\n      };\r\n      b();\r\n      setLoading(false);\r\n      return () => b;\r\n   }, [setUser]);\r\n\r\n   // this use effect is to get deployed election\r\n   useEffect(() => {\r\n      const getAddress = async () => {\r\n         setLoading(true);\r\n         let address;\r\n         try {\r\n            address = await factory.methods.deployedElection().call();\r\n            setElection(address);\r\n         } catch (err) {\r\n            notify(err, 'error');\r\n         }\r\n         setLoading(false);\r\n      };\r\n      getAddress();\r\n      return () => getAddress;\r\n   }, []);\r\n\r\n   //react notifier\r\n   const notify = (message, status) => {\r\n      switch (status) {\r\n         case 'error':\r\n            toast.error(message, {\r\n               autoClose: 3000,\r\n               position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n            break;\r\n\r\n         case 'success':\r\n            toast.success(message, {\r\n               autoClose: 3000,\r\n               position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n            break;\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <AuthContext.Provider\r\n               value={{\r\n                  user: user,\r\n                  setUser: setUser,\r\n                  notify: notify,\r\n                  getAccount: getAccount,\r\n                  election: election,\r\n                  loading: loading,\r\n                  validAccount: validAccount,\r\n                  setElection: setElection,\r\n                  results,\r\n                  setResults,\r\n                  names,\r\n                  setNames,\r\n               }}\r\n            >\r\n               {props.children}\r\n            </AuthContext.Provider>\r\n         )}\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AuthContext;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\AddElection\\AddElection.js",[],"D:\\Blockchain Ballot\\frontend\\src\\components\\Sidebar.js",["132","133","134"],"import axios from 'axios';\r\nimport { useContext, useState } from 'react';\r\nimport { GiPodiumWinner, GiVote } from 'react-icons/gi';\r\nimport { SiBlockchaindotcom } from 'react-icons/si';\r\nimport { BiHome, BiLogIn, BiLogOut } from 'react-icons/bi';\r\nimport { HiUserGroup } from 'react-icons/hi';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthContext from '../store/auth-context';\r\nimport {\r\n   AiFillEdit,\r\n   AiOutlinePlusSquare,\r\n   AiOutlineUserAdd,\r\n   AiFillLinkedin,\r\n   AiFillMail,\r\n} from 'react-icons/ai';\r\nconst SideBar = ({ setShowSidebar, showSidebar }) => {\r\n   const { user, setUser, notify, election } = useContext(AuthContext);\r\n\r\n   const logoutHandler = async () => {\r\n      try {\r\n         await axios.get('/election/logout', {\r\n            withCredentials: true,\r\n         });\r\n         setUser(null);\r\n         notify('User Logged out', 'success');\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <svg\r\n            onClick={() => setShowSidebar(!showSidebar)}\r\n            className={`fixed md:hidden  z-50 flex items-center cursor-pointer left-10 top-7 ease-in-out duration-300 ${\r\n               showSidebar && 'left-36 md:left-36 lg:left-48'\r\n            }`}\r\n            fill={`${showSidebar ? 'white' : 'blue'}`}\r\n            viewBox='0 0 100 80'\r\n            width='40'\r\n            height='40'\r\n         >\r\n            <rect width='50' height='5'></rect>\r\n            <rect y='15' width='50' height='5'></rect>\r\n            <rect y='30' width='50' height='5'></rect>\r\n         </svg>\r\n         <div\r\n            className={`grid z-30 md:hidden bg-indigo-500 shadow-2xl h-screen px-3 ease-in-out duration-300 justify-items-center fixed ${\r\n               showSidebar ? 'transform translate-full' : 'transform -translate-x-60'\r\n            }\r\n                `}\r\n         >\r\n            <ul className='relative text-lg'>\r\n               <li>\r\n                  <SiBlockchaindotcom className='h-10 w-10 text-white mx-16 my-5 ' />\r\n                  <br />\r\n               </li>\r\n\r\n               <div className='border-t border-gray-400 py-4'></div>\r\n               {/* No user logged in */}\r\n               {!user && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogIn className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/login'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Login\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* user logged in but no election ongoing */}\r\n               {user && user.role === 'user' && !user.electionOngoing && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* user logged in and election ongoing */}\r\n               {user && user.role === 'user' && user.electionOngoing && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiVote className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/election'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Vote\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* admin logged in and election ongoing */}\r\n               {user && user.electionOngoing && user.role === 'admin' && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiVote className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/election'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Manage Election\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <HiUserGroup className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/users'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All users\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n\r\n               {/* Admin , no election ongoing and not added elction yet */}\r\n               {user &&\r\n                  !user.electionOngoing &&\r\n                  user.role === 'admin' &&\r\n                  election === '0x0000000000000000000000000000000000000000' && (\r\n                     <>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiHome className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Home Page\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <AiOutlinePlusSquare className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/addElection'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Add Election\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiPodiumWinner className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/results'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All results\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <HiUserGroup className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/users'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All users\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiLogOut className='inline text-white my-4' />\r\n                              <button\r\n                                 className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                                 onClick={logoutHandler}\r\n                              >\r\n                                 Logout\r\n                              </button>\r\n                           </div>\r\n                        </li>\r\n                     </>\r\n                  )}\r\n               {/* Admin , no election ongoing and already added elction */}\r\n               {user &&\r\n                  !user.electionOngoing &&\r\n                  user.role === 'admin' &&\r\n                  election !== '0x0000000000000000000000000000000000000000' && (\r\n                     <>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiHome className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Home Page\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiVote className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/election'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Manage Election\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <AiOutlineUserAdd className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/addCandidate'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Add Candidate\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiPodiumWinner className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/results'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All results\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <HiUserGroup className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/users'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All users\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiLogOut className='inline text-white my-4' />\r\n                              <button\r\n                                 className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                                 onClick={logoutHandler}\r\n                              >\r\n                                 Logout\r\n                              </button>\r\n                           </div>\r\n                        </li>\r\n                     </>\r\n                  )}\r\n               {user && (\r\n                  <>\r\n                     {/* Ethereum Address {user.eAddress} */}\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <AiFillEdit className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/edituser'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Edit your address\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n            </ul>\r\n            <div className='mt-auto'>\r\n               <div className='border-t border-white py-4'></div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SideBar;\r\n","D:\\Blockchain Ballot\\frontend\\src\\components\\Layout.js",["135","136"],"import axios from 'axios';\r\nimport { useContext, useState } from 'react';\r\nimport { GiPodiumWinner, GiVote } from 'react-icons/gi';\r\nimport { SiBlockchaindotcom } from 'react-icons/si';\r\nimport { BiHome, BiLogIn, BiLogOut } from 'react-icons/bi';\r\nimport { HiUserGroup } from 'react-icons/hi';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthContext from '../store/auth-context';\r\nimport {\r\n   AiFillEdit,\r\n   AiOutlinePlusSquare,\r\n   AiOutlineUserAdd,\r\n   AiFillLinkedin,\r\n   AiFillMail,\r\n} from 'react-icons/ai';\r\nimport SideBar from './Sidebar';\r\nconst Layout = ({ children }) => {\r\n   const { user, setUser, notify, election } = useContext(AuthContext);\r\n   const [showSidebar, setShowSidebar] = useState(false);\r\n   const logoutHandler = async () => {\r\n      try {\r\n         await axios.get('/election/logout', {\r\n            withCredentials: true,\r\n         });\r\n         setUser(null);\r\n         notify('User Logged out', 'success');\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n      }\r\n   };\r\n   return (\r\n      <div className='flex max-h-screen overflow-y-hidden'>\r\n         <SideBar showSidebar={showSidebar} setShowSidebar={setShowSidebar} />\r\n         <aside className='hidden md:grid h-screen px-4 bg-indigo-500'>\r\n            <ul className='relative text-lg'>\r\n               <li>\r\n                  <SiBlockchaindotcom className='h-10 w-10 text-white mx-16 my-5 ' />\r\n                  <br />\r\n               </li>\r\n\r\n               <div className='border-t border-gray-400 py-4'></div>\r\n               {/* No user logged in */}\r\n               {!user && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogIn className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/login'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Login\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* user logged in but no election ongoing */}\r\n               {user && user.role === 'user' && !user.electionOngoing && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* user logged in and election ongoing */}\r\n               {user && user.role === 'user' && user.electionOngoing && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiVote className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/election'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Vote\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n               {/* admin logged in and election ongoing */}\r\n               {user && user.electionOngoing && user.role === 'admin' && (\r\n                  <>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiHome className='inline text-white my-4' />\r\n                           <Link to='/' className='text-gray-200 h-12 px-3  hover:text-indigo-300'>\r\n                              Home Page\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiVote className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/election'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Manage Election\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <GiPodiumWinner className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/results'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All results\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <HiUserGroup className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/users'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              All users\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <BiLogOut className='inline text-white my-4' />\r\n                           <button\r\n                              className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                              onClick={logoutHandler}\r\n                           >\r\n                              Logout\r\n                           </button>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n\r\n               {/* Admin , no election ongoing and not added elction yet */}\r\n               {user &&\r\n                  !user.electionOngoing &&\r\n                  user.role === 'admin' &&\r\n                  election === '0x0000000000000000000000000000000000000000' && (\r\n                     <>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiHome className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Home Page\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <AiOutlinePlusSquare className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/addElection'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Add Election\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiPodiumWinner className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/results'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All results\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <HiUserGroup className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/users'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All users\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiLogOut className='inline text-white my-4' />\r\n                              <button\r\n                                 className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                                 onClick={logoutHandler}\r\n                              >\r\n                                 Logout\r\n                              </button>\r\n                           </div>\r\n                        </li>\r\n                     </>\r\n                  )}\r\n               {/* Admin , no election ongoing and already added elction */}\r\n               {user &&\r\n                  !user.electionOngoing &&\r\n                  user.role === 'admin' &&\r\n                  election !== '0x0000000000000000000000000000000000000000' && (\r\n                     <>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiHome className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Home Page\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiVote className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/election'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Manage Election\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <AiOutlineUserAdd className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/addCandidate'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 Add Candidate\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <GiPodiumWinner className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/results'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All results\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <HiUserGroup className='inline text-white my-4' />\r\n                              <Link\r\n                                 to='/users'\r\n                                 className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                              >\r\n                                 All users\r\n                              </Link>\r\n                           </div>\r\n                        </li>\r\n                        <li className='relative'>\r\n                           <div>\r\n                              <BiLogOut className='inline text-white my-4' />\r\n                              <button\r\n                                 className='text-gray-200 h-12 px-3 hover:text-indigo-300'\r\n                                 onClick={logoutHandler}\r\n                              >\r\n                                 Logout\r\n                              </button>\r\n                           </div>\r\n                        </li>\r\n                     </>\r\n                  )}\r\n               {user && (\r\n                  <>\r\n                     {/* Ethereum Address {user.eAddress} */}\r\n                     <li className='relative'>\r\n                        <div>\r\n                           <AiFillEdit className='inline text-white my-4' />\r\n                           <Link\r\n                              to='/edituser'\r\n                              className='text-gray-200 h-12 px-3  hover:text-indigo-300'\r\n                           >\r\n                              Edit your address\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </>\r\n               )}\r\n            </ul>\r\n            <div className='mt-auto'>\r\n               <div className='border-t border-white py-4'></div>\r\n            </div>\r\n         </aside>\r\n         <main\r\n            className={`flex-1 overflow-y-auto h-screen ${\r\n               showSidebar ? 'bg-gray-400 bg-opacity-80  md:bg-inherit md:bg-opacity-0' : ''\r\n            }`}\r\n         >\r\n            {children}\r\n         </main>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Layout;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\Login.js",["137"],"/**\r\n * @prettier\r\n */\r\nimport { useEffect, useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../components/Loading';\r\nimport { useNavigate } from 'react-router';\r\nimport AuthContext from '../store/auth-context';\r\nimport { AiFillLock, AiOutlineMail } from 'react-icons/ai';\r\nconst Login = () => {\r\n   const { user, setUser, notify } = useContext(AuthContext);\r\n   const [email, setEmail] = useState('');\r\n   const [otp, setOtp] = useState('');\r\n   const [loading, setLoading] = useState(false);\r\n   const [disable, setDisable] = useState(false);\r\n   const [seconds, setSeconds] = useState(15);\r\n   //variable to show otp input and button\r\n   const [sent, setSent] = useState(false);\r\n   const navigate = useNavigate();\r\n   let interval = null;\r\n   const sendOTP = async (event) => {\r\n      event.preventDefault();\r\n      if (email.trim().length === 0) {\r\n         notify('Enter an email please', 'error');\r\n         return;\r\n      }\r\n      clearInterval(interval);\r\n      setSent(true);\r\n      setLoading(true);\r\n\r\n      interval = null;\r\n      setSeconds(15);\r\n      //sending OTP\r\n      try {\r\n         await axios.post('/election/generateOtp', {\r\n            email,\r\n         });\r\n         notify('OTP has been sent to the email', 'success');\r\n         setDisable(true);\r\n         interval = setInterval(() => {\r\n            if (seconds > 0) {\r\n               setSeconds((seconds) => seconds > 0 && seconds - 1);\r\n            } else {\r\n               console.log('clear interval');\r\n               clearInterval(interval);\r\n            }\r\n         }, 1000);\r\n         setSeconds(15);\r\n      } catch (err) {\r\n         setSent(false);\r\n         notify(err.response.data.errMessage, 'error');\r\n      }\r\n      setLoading(false);\r\n   };\r\n   //logging in account\r\n   const loginHandler = async (event) => {\r\n      event.preventDefault();\r\n      setLoading(true);\r\n      try {\r\n         const response = await axios.post(\r\n            '/election/login',\r\n            {\r\n               email,\r\n               otp,\r\n            },\r\n            {\r\n               withCredentials: true,\r\n               headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },\r\n            }\r\n         );\r\n         notify('Logged in succesfully', 'success');\r\n         //setting user useStae defined in context\r\n         setUser(response.data.user);\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (user) {\r\n         navigate('/');\r\n      }\r\n      !(seconds > 0) && setDisable(false);\r\n   });\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <div className='min-h-screen flex items-center justify-center bg-gray-50 py-12 px-16 sm:px-6 lg:px-8'>\r\n               <div className='max-w-md w-full  space-y-8'>\r\n                  <div>\r\n                     <h2 className='mt-6 text-center text-3xl font-extrabold text-gray-900'>\r\n                        Login\r\n                     </h2>\r\n                  </div>\r\n                  <form className='mt-8 space-y-6' onSubmit={loginHandler}>\r\n                     <div className='rounded-md shadow-sm space-y-4'>\r\n                        {/* Email */}\r\n                        <div>\r\n                           <label\r\n                              htmlFor='email'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Email\r\n                           </label>\r\n                           <div className='mt-1 relative rounded-md shadow-sm'>\r\n                              <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <AiOutlineMail\r\n                                    className='h-5 w-5 text-gray-400'\r\n                                    aria-hidden='true'\r\n                                 />\r\n                              </div>\r\n                              <input\r\n                                 type='email'\r\n                                 name='email'\r\n                                 id='email'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                 placeholder='you@example.com'\r\n                                 value={email}\r\n                                 onChange={(e) => setEmail(e.target.value)}\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n\r\n                        {/* OTP */}\r\n                        {sent && (\r\n                           <div>\r\n                              <label\r\n                                 htmlFor='OTP'\r\n                                 className='block text-sm font-medium text-gray-700'\r\n                              >\r\n                                 OTP\r\n                              </label>\r\n\r\n                              <div className='mt-1 relative rounded-md shadow-sm'>\r\n                                 <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                    <AiFillLock\r\n                                       className='h-5 w-5 text-gray-400'\r\n                                       aria-hidden='true'\r\n                                    />\r\n                                 </div>\r\n\r\n                                 <input\r\n                                    name='otp'\r\n                                    id='otp'\r\n                                    className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                    value={otp}\r\n                                    onChange={(e) => setOtp(e.target.value)}\r\n                                    required\r\n                                 />\r\n                                 {disable && (\r\n                                    <div className='fixed text-xs text-gray-500'>\r\n                                       Can send OTP again in : {seconds}\r\n                                    </div>\r\n                                 )}\r\n                              </div>\r\n                           </div>\r\n                        )}\r\n                     </div>\r\n                     {sent && (\r\n                        <div>\r\n                           <button\r\n                              type='submit'\r\n                              className='group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'\r\n                           >\r\n                              Sign In\r\n                           </button>\r\n                        </div>\r\n                     )}\r\n                     {!disable && (\r\n                        <div>\r\n                           <button\r\n                              type='button'\r\n                              onClick={sendOTP}\r\n                              className='group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400 '\r\n                           >\r\n                              Send OTP\r\n                           </button>\r\n                        </div>\r\n                     )}\r\n                  </form>\r\n               </div>\r\n            </div>\r\n         )}\r\n\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\nexport default Login;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\Election.js",["138"],"/**\r\n * @prettier\r\n */\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Electioneth from '../../ethereum/election';\r\nimport ShowCandidate from './ShowCandidate';\r\nimport Loading from '../../components/Loading';\r\nimport { useNavigate } from 'react-router';\r\nimport StartElection from './StartElection';\r\nimport EndElection from './EndElection';\r\nimport { useEndElection } from '../../components/hooks/end-election';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Election = () => {\r\n   const { user, election, notify } = useContext(AuthContext);\r\n   const [loading, setLoading] = useState(false);\r\n   let tempCandidate;\r\n   const navigate = useNavigate();\r\n   const [candidates, setCandidates] = useState([]);\r\n   const [candidateCount, setCount] = useState(0);\r\n   const [electionName, setElectionName] = useState('');\r\n\r\n   //for validation\r\n   useEffect(() => {\r\n      (async () => {\r\n         if (!user) {\r\n            notify('Please login first', 'error');\r\n            navigate('/login');\r\n         } else {\r\n            //get intial value of validAccount, if the user is using right ethereum ot not\r\n            //getAccount();\r\n            //checking if there is no ongoing election\r\n            if (election === '0x0000000000000000000000000000000000000000') {\r\n               navigate('/');\r\n            }\r\n            //election.ongoing is only true if admin adds an election\r\n            if (user.electionOngoing === false && user.role !== 'admin') {\r\n               notify('There is no ongoing election', 'error');\r\n               navigate('/');\r\n            }\r\n         }\r\n      })();\r\n   });\r\n   //to get all candidates\r\n   useEffect(() => {\r\n      let b = async () => {\r\n         //try{\r\n         setLoading(true);\r\n         if (election !== '0x0000000000000000000000000000000000000000') {\r\n            const Election = Electioneth(election);\r\n            //getting candidate count\r\n            let count = await Election.methods.candidateCount().call();\r\n            setCount(+count);\r\n\r\n            //getting election name\r\n            let name = await Election.methods.electionName().call();\r\n            setElectionName(name);\r\n\r\n            //getting all candidates and storing in one variable\r\n\r\n            tempCandidate = await Promise.all(\r\n               Array(+count)\r\n                  .fill(1)\r\n                  .map((element, index) => {\r\n                     return Election.methods.candidates(index).call();\r\n                  })\r\n            );\r\n            setCandidates(tempCandidate);\r\n            //console.log(tempCandidate);\r\n         }\r\n         setLoading(false);\r\n      };\r\n      b();\r\n      return () => {\r\n         b = null;\r\n      };\r\n   }, []);\r\n\r\n   // //use effect to remove bug where user rejects second transaction while ending election\r\n   useEndElection('election', setLoading);\r\n\r\n   return (\r\n      <>\r\n         {!loading && candidateCount >= 0 && (\r\n            <h2 className='mt-5 text-center text-3xl font-bold mb-8 text-gray-900'>\r\n               {electionName}\r\n            </h2>\r\n         )}\r\n         {!loading && candidateCount === 0 && (\r\n            <h2 className='mt-5 text-center text-3xl font-bold mb-8 text-gray-900'>\r\n               No Candidates\r\n            </h2>\r\n         )}\r\n         {!loading &&\r\n            election !== '0x0000000000000000000000000000000000000000' &&\r\n            candidateCount > 0 && (\r\n               <>\r\n                  {/* <th>Vote</th> */}\r\n                  <div className=''>\r\n                     <div className='grid lg:grid-cols-2 md:grid-cols-2 sm:grid-cols-1 '>\r\n                        {candidateCount &&\r\n                           candidates.map((candidate, index) => (\r\n                              <ShowCandidate\r\n                                 key={index}\r\n                                 id={index}\r\n                                 candidate={candidate}\r\n                                 candidateCount={candidateCount}\r\n                                 setLoading={setLoading}\r\n                              />\r\n                           ))}\r\n                     </div>\r\n                     <div className='flex mt-3 relative justify-center'>\r\n                        {user && !user.electionOngoing && user.role === 'admin' && (\r\n                           <>\r\n                              <StartElection setLoading={setLoading} />\r\n\r\n                              <Link to='/addCandidate '>\r\n                                 <button className='lg:w-40 md:w-30 ml-2 flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                                    Add Candidate\r\n                                 </button>\r\n                              </Link>\r\n                           </>\r\n                        )}\r\n                     </div>\r\n                     <div className='flex justify-end lg:px-24 md:px-8 px-4 '>\r\n                        {user && user.electionOngoing && user.role === 'admin' && (\r\n                           <button className='w-40 ml-6 flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                              <EndElection setLoading={setLoading} />\r\n                           </button>\r\n                        )}\r\n                     </div>\r\n                  </div>\r\n               </>\r\n            )}\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Election;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllUsers\\AllUser.js",["139","140"],"import axios from 'axios';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport Loading from '../../components/Loading';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthContext from '../../store/auth-context';\r\nimport ShowUser from './ShowUser';\r\nconst AllUser = () => {\r\n   const { user, notify } = useContext(AuthContext);\r\n   const [users, setUsers] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const navigate = useNavigate();\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         if (!user) {\r\n            notify('You need to login first', 'error');\r\n            console.log(\"1\")\r\n            // navigate('/login');\r\n         } else {\r\n            if (user.role === 'user') {\r\n               notify('You do not have access to this route', 'error');\r\n               console.log(\"2\")\r\n               // navigate('/');\r\n            } else {\r\n               console.log(\"3\")\r\n               //get user data\r\n               try {\r\n                  console.log(\"4\")\r\n                  setLoading(true);\r\n                  const response = await axios.get('/election/allUsers', {\r\n                     withCredentials: true,\r\n                  });\r\n                  setUsers(response.data.users);\r\n               } catch (err) {\r\n                  console.log(\"5\")\r\n                  notify(err.response.data.errMessage, 'error');\r\n               }\r\n               setLoading(false);\r\n            }\r\n         }\r\n      };\r\n      b();\r\n   }, []);\r\n   return (\r\n      <>\r\n         {loading && <Loading />}\r\n         <div className='flex flex-col mt-5 overflow-x-hidden overflow-y-hidden'>\r\n            <div className='-my-2 overflow-x-auto sm:-mx-8 sm:px-4 lg:px-8'>\r\n               <div className='py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8'>\r\n                  <div>\r\n                     <h2 className='mt-5 text-center text-3xl font-bold mb-8 text-gray-900'>\r\n                        All users\r\n                     </h2>\r\n                  </div>\r\n                  <div className='shadow overflow-hidden border-b border-gray-200 sm:rounded-lg'>\r\n                     <table className='min-w-full divide-y divide-gray-300 overflow-x-scroll '>\r\n                        <thead className='bg-indigo-500'>\r\n                           <tr>\r\n                              <th\r\n                                 scope='col'\r\n                                 className='px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider'\r\n                              >\r\n                                 Name\r\n                              </th>\r\n                              <th\r\n                                 scope='col'\r\n                                 className='px-6 mx-12 py-3 text-left text-xs font-medium text-white uppercase tracking-wider max-w-md'\r\n                              >\r\n                                 Ethereum Address\r\n                              </th>\r\n                              <th\r\n                                 scope='col'\r\n                                 className='px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider'\r\n                              >\r\n                                 Status\r\n                              </th>\r\n                              <th\r\n                                 scope='col'\r\n                                 className='px-2 py-3 text-left text-xs font-medium text-white uppercase tracking-wider'\r\n                              >\r\n                                 Role\r\n                              </th>\r\n                              {user && !user.electionOngoing && (\r\n                                 <th scope='col' className='relative px-6 py-3'>\r\n                                    <span className='sr-only'>Delete</span>\r\n                                 </th>\r\n                              )}\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody className='bg-white divide-y divide-gray-200'>\r\n                           {users.length > 0 &&\r\n                              users.map((singleUser, element) => (\r\n                                 <ShowUser\r\n                                    key={element}\r\n                                    id={singleUser._id}\r\n                                    user={singleUser}\r\n                                    setLoading={setLoading}\r\n                                    loading={loading}\r\n                                    setUsers={setUsers}\r\n                                 />\r\n                              ))}\r\n                        </tbody>\r\n                     </table>\r\n                  </div>\r\n\r\n                  {!loading && user && !user.electionOngoing && (\r\n                     <button className='border border-transparent py-2 mt-5 w-40 rounded-md text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                        <Link to='/addUser'> Register user</Link>\r\n                     </button>\r\n                  )}\r\n               </div>\r\n            </div>\r\n         </div>\r\n         {!loading && users.length === 0 && <p>No user</p>}\r\n      </>\r\n   );\r\n};\r\nexport default AllUser;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\SingleResult\\SingleResult.js",["141"],"/**\r\n * @prettier\r\n */\r\nimport { useEffect, useState, useContext } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useGetResults } from '../../components/hooks/get-results';\r\nimport Loading from '../../components/Loading';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Electioneth from '../../ethereum/election';\r\nimport AuthContext from '../../store/auth-context';\r\nimport ShowResult from './ShowResult';\r\nimport confetti from 'canvas-confetti';\r\nconst SingleResult = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const [isDraw, setIsDraw] = useState(false);\r\n   const [electionName, setElectionName] = useState('');\r\n   const [candidates, setCandidates] = useState([]);\r\n   const [candidateCount, setCount] = useState(0);\r\n   const { address } = useParams();\r\n   const { notify, results } = useContext(AuthContext);\r\n   const navigate = useNavigate();\r\n\r\n   useGetResults(setLoading);\r\n\r\n   useEffect(() => {\r\n      let b = async () => {\r\n         //try{\r\n\r\n         setLoading(true);\r\n         //First check if address by user is from our current election\r\n         if (!results.includes(address)) {\r\n            navigate(-1);\r\n            notify('Wrong address', 'error');\r\n         } else {\r\n            try {\r\n               const Election = Electioneth(address);\r\n               //getting candidate count\r\n               let count = await Election.methods.candidateCount().call();\r\n               setCount(+count);\r\n\r\n               //getting election name\r\n               let name = await Election.methods.electionName().call();\r\n               setElectionName(name);\r\n\r\n               //getting all candidates and storing in one variable\r\n               let tempCandidate = await Promise.all(\r\n                  Array(+count)\r\n                     .fill(1)\r\n                     .map((element, index) => {\r\n                        return Election.methods.candidates(index).call();\r\n                     })\r\n               );\r\n\r\n               //sort tempCandidates\r\n               tempCandidate.sort((a, b) => b.votes - a.votes);\r\n               //checking for draw\r\n               if (+count >= 2 && +tempCandidate[0].votes === +tempCandidate[1].votes) {\r\n                  setIsDraw(true);\r\n               }\r\n\r\n               setCandidates(tempCandidate);\r\n               if (!isDraw && count >= 1)\r\n                  confetti({\r\n                     particleCount: 250,\r\n                  });\r\n            } catch (err) {\r\n               notify(err.message, 'error');\r\n            }\r\n         }\r\n\r\n         setLoading(false);\r\n      };\r\n      b();\r\n      return () => (b = null);\r\n   }, []);\r\n   return (\r\n      <>\r\n         {loading && <Loading />}\r\n         {!loading && candidateCount === 0 && <p>No candidates found</p>}\r\n         {!loading && candidateCount > 0 && (\r\n            <div className='flex flex-col'>\r\n               <div>\r\n                  <h2 className='mt-5 text-center text-3xl font-bold mb-8 text-gray-900'>\r\n                     {electionName}\r\n                  </h2>\r\n               </div>\r\n               <div className='grid lg:grid-cols-2 md:grid-cols-2 sm:grid-cols-1 '>\r\n                  {candidates.map((candidate, index) => (\r\n                     <ShowResult key={index} id={index} candidate={candidate} isDraw={isDraw} />\r\n                  ))}\r\n               </div>\r\n               <button className='border border-transparent ml-6 py-2 mt-5 w-40 rounded-md text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                  <Link to='/results'> All results</Link>\r\n               </button>\r\n            </div>\r\n         )}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SingleResult;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\LandingPage\\LandinPage.js",["142","143","144","145"],"/**\r\n * @prettier\r\n */\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Loading from '../../components/Loading';\r\nimport { useEndElection } from '../../components/hooks/end-election';\r\n\r\nconst LandingPage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const { user, notify, election } = useContext(AuthContext);\r\n   // useEffect(() => {\r\n   //    if (!user) {\r\n   //       notify(\"Please login first\", \"error\");\r\n   //       //navigate('/login');\r\n   //    }\r\n   // }, [user]);\r\n\r\n   //use effect to remove bug where user rejects second transaction while ending election\r\n   useEndElection('', setLoading);\r\n\r\n   return (\r\n      <>\r\n         <div className='flex flex-col justify-center items-center my-auto mx-5 h-screen  '>\r\n            <h2 className='pb-4 text-center text-3xl font-extrabold text-gray-900'>\r\n               Online Voting System\r\n            </h2>\r\n            <div className={`flex filter flex-col lg:flex-row rounded-lg py-4 `}>\r\n               <div className='my-auto mx-auto items-center justify-center pl-2'>\r\n                  <img\r\n                     className='mt-3  max-w-lg lg:h-48 lg:w-48 md:h-56 md:w-56 w-32 h-32 rounded-md object-cover'\r\n                     src={`https://images.unsplash.com/photo-1494172961521-33799ddd43a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80`}\r\n                  />\r\n               </div>\r\n\r\n               <div className='py-4 px-8 flex flex-col my-auto md:max-w-l lg:max-w-md'>\r\n                  <p className='text-gray-700 mb-4 text-sm'>\r\n                     Welecome to Online Voting System, a secured voting system built using polygon\r\n                     blockchain. Your vote will be confidential and will not be revealed to anyone\r\n                  </p>\r\n                  {/* No user */}\r\n                  {!loading && !user && (\r\n                     <Link to='/login'>\r\n                        <button className='group relative w-2/5 lg:mx-0 md:mx-auto mx-auto flex justify-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                           Login\r\n                        </button>\r\n                     </Link>\r\n                  )}\r\n\r\n                  {/*User and election ongoing */}\r\n                  {!loading && user && user.electionOngoing && (\r\n                     <Link to='/election'>\r\n                        <button className='group relative w-2/5 lg:mx-0 md:mx-auto mx-auto flex justify-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                           Vote now\r\n                        </button>\r\n                     </Link>\r\n                  )}\r\n\r\n                  {/* User role and no election ongoing */}\r\n                  {!loading && user && user.role === 'user' && !user.electionOngoing && (\r\n                     <p className='text-center font-semibold'>No election ongoing</p>\r\n                  )}\r\n\r\n                  {/* Admin role and no election ongoing */}\r\n                  {!loading &&\r\n                     user &&\r\n                     user.role === 'admin' &&\r\n                     !user.electionOngoing &&\r\n                     election === '0x0000000000000000000000000000000000000000' && (\r\n                        <Link to='/addElection'>\r\n                           <button className='group relative w-2/5 lg:mx-0 md:mx-auto mx-auto flex justify-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                              Start Election\r\n                           </button>\r\n                        </Link>\r\n                     )}\r\n\r\n                  {/*Admin role and added an election but did not start it*/}\r\n                  {!loading &&\r\n                     user &&\r\n                     user.role === 'admin' &&\r\n                     !user.electionOngoing &&\r\n                     election !== '0x0000000000000000000000000000000000000000' && (\r\n                        <Link to='/election'>\r\n                           <button className='group relative w-2/5 lg:mx-0 md:mx-auto mx-auto flex justify-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'>\r\n                              Go to Election\r\n                           </button>\r\n                        </Link>\r\n                     )}\r\n               </div>\r\n            </div>\r\n            {user && (\r\n               <div className='mt-4 text-md text-gray-900'>\r\n                  <p className='text-center font-bold'>User Details</p>\r\n                  <p className='mb-4'>Name : {user.name}</p>\r\n                  <p>Address : {user.eAddress}</p>\r\n               </div>\r\n            )}\r\n         </div>\r\n\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default LandingPage;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllResults\\AllResults.js",[],"D:\\Blockchain Ballot\\frontend\\src\\pages\\AddCandidate\\AddCandidate.js",["146"],"/**\r\n * @prettier\r\n */\r\nimport axios from 'axios';\r\nimport { useContext, useState } from 'react';\r\nimport { useUserValidation } from '../../components/hooks/user-validation';\r\nimport { useNavigate } from 'react-router';\r\nimport Loading from '../../components/Loading';\r\nimport web3 from '../../ethereum/web3';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Electioneth from '../../ethereum/election';\r\nimport { MdOutlineDriveFileRenameOutline, MdOutlineDescription } from 'react-icons/md';\r\nimport { AiOutlineCloudUpload } from 'react-icons/ai';\r\n\r\nconst AddCandidate = () => {\r\n   const { election, validAccount, notify } = useContext(AuthContext);\r\n   const [loading, setLoading] = useState(false);\r\n   const [name, setName] = useState('');\r\n   const [description, setDescription] = useState('');\r\n   const [pic, setPic] = useState();\r\n   const [link, setLink] = useState('');\r\n   const navigate = useNavigate();\r\n   useUserValidation(true);\r\n\r\n   const addCandidateHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      if (!validAccount) {\r\n         notify('You are using wrong ethereum account', 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n      //cloudinary\r\n      const formData = new FormData();\r\n      formData.append('image', pic);\r\n      const resource = await axios.post('/upload', formData, {\r\n         headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n         },\r\n      });\r\n      let url = resource.data.file;\r\n      setLink(url);\r\n\r\n      //adding data to smart contract\r\n      //name, description, id: image\r\n      const Election = Electioneth(election);\r\n      try {\r\n         const accounts = await web3.eth.getAccounts();\r\n         if (!url) {\r\n            notify('err', 'error');\r\n         }\r\n\r\n         await Election.methods.addCandidate(name, description, url).send({\r\n            from: accounts[0],\r\n         });\r\n         notify('Candidate added', 'success');\r\n         navigate('/election');\r\n      } catch (err) {\r\n         notify(err.message, 'error');\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <div className='min-h-screen flex items-center justify-center bg-gray-50 py-12 px-16 sm:px-6 lg:px-8'>\r\n               <div className='max-w-md w-full  space-y-8'>\r\n                  <div>\r\n                     <h2 className='mt-6 text-center text-3xl font-extrabold text-gray-900'>\r\n                        Add a Candidate\r\n                     </h2>\r\n                  </div>\r\n                  <form className='mt-8 space-y-6' onSubmit={addCandidateHandler}>\r\n                     <div className='rounded-md shadow-sm space-y-4'>\r\n                        {/* Name */}\r\n\r\n                        <div>\r\n                           <label\r\n                              htmlFor='name'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Username\r\n                           </label>\r\n\r\n                           <div className='mt-1 relative rounded-md shadow-sm'>\r\n                              <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <MdOutlineDriveFileRenameOutline\r\n                                    className='h-5 w-5 text-gray-400'\r\n                                    aria-hidden='true'\r\n                                 />\r\n                              </div>\r\n\r\n                              <input\r\n                                 name='name'\r\n                                 id='name'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                 value={name}\r\n                                 placeholder=\"Enter candidate's name\"\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        {/* Description*/}\r\n                        <div>\r\n                           <label\r\n                              htmlFor='description'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Description\r\n                           </label>\r\n                           <div className='mt-1 relative rounded-md shadow-sm'>\r\n                              <div className='absolute mt-2 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <MdOutlineDescription\r\n                                    className='h-5 w-5 text-gray-400'\r\n                                    aria-hidden='true'\r\n                                 />\r\n                              </div>\r\n                              <textarea\r\n                                 type='text'\r\n                                 rows='10'\r\n                                 name='description'\r\n                                 id='description'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                 placeholder=\"Add candidate's description. Max: 150 characters\"\r\n                                 value={description}\r\n                                 onChange={(e) => {\r\n                                    setDescription(e.target.value);\r\n                                 }}\r\n                                 maxLength='150'\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div>\r\n                           <label\r\n                              htmlFor='image'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Upload image\r\n                           </label>\r\n                           <div className='mt-1 relative bg-gray-50'>\r\n                              <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <AiOutlineCloudUpload\r\n                                    className='h-5 w-5 text-gray-400'\r\n                                    aria-hidden='true'\r\n                                 />\r\n                              </div>\r\n                              <input\r\n                                 type='file'\r\n                                 onChange={(e) => setPic(e.target.files[0])}\r\n                                 accept='image/png, image/jpeg'\r\n                                 name='image'\r\n                                 id='image'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full  pl-10 sm:text-sm'\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n\r\n                     <div>\r\n                        <button\r\n                           type='submit'\r\n                           className='group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'\r\n                        >\r\n                           Add Candidate\r\n                        </button>\r\n                     </div>\r\n                  </form>\r\n               </div>\r\n            </div>\r\n         )}\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddCandidate;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\AddUser\\AddUser.js",[],"D:\\Blockchain Ballot\\frontend\\src\\components\\Loading.js",[],"D:\\Blockchain Ballot\\frontend\\src\\pages\\EditUser\\EditUser.js",["147"],"import axios from 'axios';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { FaEthereum } from 'react-icons/fa';\r\nimport { MdOutlineDriveFileRenameOutline } from 'react-icons/md';\r\nimport { useNavigate } from 'react-router';\r\nimport Loading from '../../components/Loading';\r\nimport AuthContext from '../../store/auth-context';\r\n\r\nconst EditUser = () => {\r\n   const { user, setUser, notify } = useContext(AuthContext);\r\n   const navigate = useNavigate();\r\n   const [loading, setLoading] = useState(false);\r\n   const n = !user ? '' : user.name;\r\n   const e = !user ? '' : user.eAddress;\r\n   const [name, setName] = useState(n);\r\n   const [eAddress, setEAddress] = useState(e);\r\n   useEffect(() => {\r\n      if (!user) {\r\n         notify('Please login first', 'error');\r\n         navigate('/login');\r\n      } else {\r\n         //checking if there is an ongoing election\r\n         if (user.electionOngoing === true) {\r\n            notify('You cannot edit your name and account during election', 'error');\r\n            navigate(-1);\r\n            return;\r\n         }\r\n      }\r\n   }, []);\r\n\r\n   const editUserHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      try {\r\n         const response = await axios.put(\r\n            '/election/edit',\r\n            {\r\n               name,\r\n               eAddress,\r\n            },\r\n            {\r\n               withCredentials: true,\r\n               headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },\r\n            }\r\n         );\r\n         notify('Your details has been edited', 'success');\r\n         //setting user useStae defined in context\r\n         setUser(response.data.user);\r\n         navigate(-1);\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n      }\r\n\r\n      setLoading(false);\r\n   };\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <div className='min-h-screen flex items-center justify-center bg-gray-50 py-12 px-16 sm:px-6 lg:px-8'>\r\n               <div className='max-w-md w-full  space-y-8'>\r\n                  <div>\r\n                     <h2 className='mt-6 text-center text-3xl font-extrabold text-gray-900'>\r\n                        Edit Profile\r\n                     </h2>\r\n                  </div>\r\n                  <form className='mt-8 space-y-6' onSubmit={editUserHandler}>\r\n                     <div className='rounded-md shadow-sm space-y-4'>\r\n                        {/* Name */}\r\n\r\n                        <div>\r\n                           <label\r\n                              htmlFor='name'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Username\r\n                           </label>\r\n\r\n                           <div className='mt-1 relative rounded-md shadow-sm'>\r\n                              <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <MdOutlineDriveFileRenameOutline\r\n                                    className='h-5 w-5 text-gray-400'\r\n                                    aria-hidden='true'\r\n                                 />\r\n                              </div>\r\n\r\n                              <input\r\n                                 name='name'\r\n                                 id='name'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                 value={name}\r\n                                 placeholder=\"Enter user's name\"\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        {/* Eth Address*/}\r\n                        <div>\r\n                           <label\r\n                              htmlFor='email'\r\n                              className='block text-sm font-medium text-gray-700'\r\n                           >\r\n                              Account Address\r\n                           </label>\r\n                           <div className='mt-1 relative rounded-md shadow-sm'>\r\n                              <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\r\n                                 <FaEthereum className='h-5 w-5 text-gray-400' aria-hidden='true' />\r\n                              </div>\r\n                              <input\r\n                                 name='eAddress'\r\n                                 id='eAddress'\r\n                                 className='focus:ring-indigo-500 py-2 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md'\r\n                                 placeholder='0x0000000000000000000000000000000000000000'\r\n                                 value={eAddress}\r\n                                 onChange={(e) => {\r\n                                    setEAddress(e.target.value);\r\n                                 }}\r\n                                 required\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n\r\n                     <div>\r\n                        <button\r\n                           type='submit'\r\n                           className='group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'\r\n                        >\r\n                           Edit Profile\r\n                        </button>\r\n                     </div>\r\n                  </form>\r\n               </div>\r\n            </div>\r\n         )}\r\n\r\n         {loading && <Loading />}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default EditUser;\r\n","D:\\Blockchain Ballot\\frontend\\src\\ethereum\\factory.js",[],"D:\\Blockchain Ballot\\frontend\\src\\ethereum\\web3.js",[],"D:\\Blockchain Ballot\\frontend\\src\\ethereum\\election.js",["148"],"/**\r\n * @prettier\r\n */\r\nimport web3 from \"./web3\";\r\nimport Election from \"./build/Election.json\";\r\n\r\nexport default (address) => {\r\n   return new web3.eth.Contract(Election.abi, address);\r\n};\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\ShowCandidate.js",["149","150","151","152"],"/**\r\n * @prettier\r\n */\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Electioneth from '../../ethereum/election';\r\nimport axios from 'axios';\r\nimport web3 from '../../ethereum/web3';\r\nimport { useNavigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ShowCandidate = ({ id, candidate, candidateCount, setLoading }) => {\r\n   const { user, validAccount, notify, election, setUser } = useContext(AuthContext);\r\n   const [vote, setVote] = useState(+candidate.votes);\r\n   const navigate = useNavigate();\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         const Election = Electioneth(election);\r\n         let newCandidate = await Election.methods.candidates(id).call();\r\n         let candidateVote = newCandidate.votes;\r\n         setVote(candidateVote);\r\n      };\r\n      b();\r\n      return () => b;\r\n   });\r\n   const voteHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n\r\n      const account = await web3.eth.getAccounts();\r\n      if (account[0] !== user.eAddress) {\r\n         notify('You are using wrong ethereum account', 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n      //voting the candidate and retriving latest candidate vote count\r\n      try {\r\n         const Election = Electioneth(election);\r\n         const accounts = await web3.eth.getAccounts();\r\n         await Election.methods.voteCandidate(id).send({\r\n            from: accounts[0],\r\n         });\r\n         setVote((prevVote) => prevVote + 1);\r\n         notify('You have successfully voted a candidate', 'success');\r\n      } catch (err) {\r\n         notify(err.message, 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n      try {\r\n         //send a put request\r\n         const response = await axios.put(\r\n            '/election/vote',\r\n            {},\r\n            {\r\n               withCredentials: true,\r\n            }\r\n         );\r\n         setUser(response.data.user);\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n\r\n      console.log(vote);\r\n\r\n      setLoading(false);\r\n      // navigate('/election')\r\n   };\r\n   return (\r\n      <>\r\n         <div className='flex justify-start mt-5 mx-5'>\r\n            <div className='flex filter drop-shadow-xl flex-col lg:flex-row rounded-lg hover:shadow-xl shadow-lg bg-gray-200'>\r\n               <div className='my-auto mx-auto items-center justify-center pl-2 '>\r\n                  <img\r\n                     className='mt-3 lg:h-20 max-w-lg lg:w-20 md:h-16 md:w-16 w-32 h-32 rounded-full object-cover'\r\n                     src={`${candidate.url}`}\r\n                  />\r\n                  <h5 className='text-gray-900 lg:text-lg md:text-md text-center font-medium mb-2'>\r\n                     {candidate.name}\r\n                  </h5>\r\n               </div>\r\n\r\n               <div className='py-4 px-2 flex flex-col justify-start md:max-w-l lg:max-w-md'>\r\n                  <p className='text-gray-700 mb-4 text-sm'>{candidate.description}</p>\r\n                  {user && user.electionOngoing && !user.hasVoted && (\r\n                     <button\r\n                        onClick={voteHandler}\r\n                        className='mx-auto relative w-3/4 rounded-lg border border-transparent py-2 mt-5 text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'\r\n                     >\r\n                        Vote\r\n                     </button>\r\n                  )}\r\n               </div>\r\n            </div>\r\n         </div>\r\n         {/* <tr>\r\n            <td>{candidate.name}</td>\r\n            <td>{candidate.description}</td>\r\n            <td>{vote}</td>\r\n            {user && user.electionOngoing && !user.hasVoted && (\r\n               <td>\r\n                  <button onClick={voteHandler}>Vote</button>\r\n               </td>\r\n            )}\r\n            {/* <td><button onClick={voteHandler}>Vote</button></td> */}\r\n         {/* {user && user.role === 'admin' && !user.electionOngoing}\r\n            <td>{candidate.url}</td>\r\n            <td>\r\n               <Link to='/editCandidate'>Edit Candidate</Link>\r\n            </td>\r\n         </tr>  */}\r\n      </>\r\n   );\r\n};\r\nexport default ShowCandidate;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\EndElection.js",["153","154"],"/**\r\n * @prettier\r\n */\r\nimport axios from 'axios';\r\nimport { useContext } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Electioneth from '../../ethereum/election';\r\nimport Factory from '../../ethereum/factory';\r\nimport web3 from '../../ethereum/web3';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst EndElection = ({ setLoading }) => {\r\n   const { user, election, notify, validAccount, setUser, setElection, getAccount } =\r\n      useContext(AuthContext);\r\n   //fetch api that election has ended\r\n   const navigate = useNavigate();\r\n   const endElectionHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      const account = await web3.eth.getAccounts();\r\n      //checking if user is using right ethereum account\r\n      if (account[0] !== user.eAddress) {\r\n         notify('You are using wrong ethereum account', 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n\r\n      const Election = Electioneth(election);\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      try {\r\n         //end election in Election contract\r\n         await Election.methods.endElection().send({\r\n            from: accounts[0],\r\n         });\r\n         //end election in ElectionFactory\r\n         await Factory.methods.clearFactory().send({\r\n            from: accounts[0],\r\n         });\r\n      } catch (err) {\r\n         notify(err.message, 'error');\r\n         setLoading(false);\r\n         navigate('/');\r\n         return;\r\n      }\r\n      //changing electionOngoing to false and hasVoted to false\r\n      try {\r\n         await axios.put(\r\n            'election/endElection',\r\n            {\r\n               address: election,\r\n            },\r\n            {\r\n               withCredentials: true,\r\n            }\r\n         );\r\n         //get updated user back\r\n         const response = await axios.get('election/getUser', {\r\n            withCredentials: true,\r\n         });\r\n         setUser(response.data.user);\r\n         setElection('0x0000000000000000000000000000000000000000');\r\n         notify('Election has ended', 'success');\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n\r\n      setLoading(false);\r\n      navigate(`/`);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <button onClick={endElectionHandler}>End Election</button>\r\n      </>\r\n   );\r\n};\r\nexport default EndElection;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\Election\\StartElection.js",["155","156","157"],"/**\r\n * @prettier\r\n */\r\nimport axios from 'axios';\r\nimport { useContext, useState } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nimport Electioneth from '../../ethereum/election';\r\nimport web3 from '../../ethereum/web3';\r\n\r\nconst StartElection = ({ setLoading }) => {\r\n   const { user, election, notify, validAccount, setUser, getAccount } = useContext(AuthContext);\r\n   const startElectionHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n\r\n      const account = await web3.eth.getAccounts();\r\n      //checking if user is using right ethereum account\r\n      if (account[0] !== user.eAddress) {\r\n         notify('You are using wrong ethereum account', 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n\r\n      //starting election in contract\r\n      const Election = Electioneth(election);\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      try {\r\n         await Election.methods.startElection().send({\r\n            from: accounts[0],\r\n         });\r\n         notify('Election has been started', 'success');\r\n      } catch (err) {\r\n         notify(err.message, 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n\r\n      try {\r\n         //changing electionOngoing to true for all user accounts\r\n         await axios.get('/election/startElection', {\r\n            withCredentials: true,\r\n         });\r\n         //retrive changed user database\r\n         const response = await axios.get('/election/getUser', {\r\n            withCredentials: true,\r\n         });\r\n         setUser(response.data.user);\r\n      } catch (err) {\r\n         notify(err.response.data.errMessage, 'error');\r\n         setLoading(false);\r\n         return;\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <button\r\n            className='lg:w-40 md:w-30 md:ml-7 lg:ml-7 ml-6 flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-400'\r\n            onClick={startElectionHandler}\r\n         >\r\n            Start Election\r\n         </button>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default StartElection;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\SingleResult\\ShowResult.js",["158"],"/**\r\n * @prettier\r\n */\r\nconst ShowResult = ({ candidate, isDraw, id }) => {\r\n   return (\r\n      <div className='flex justify-start mt-5 mx-5 mb-3'>\r\n         <div\r\n            className={`flex filter  flex-col lg:flex-row rounded-lg  ${\r\n               id === 0 && !isDraw && candidate.votes > 0\r\n                  ? 'bg-winner drop-shadow-3xl shadow-card'\r\n                  : 'bg-gray-200 drop-shadow-md shadow-xl'\r\n            } ${id === 0 && isDraw && 'bg-indigo-200 drop-shadow-xl shadow-xl'}`}\r\n         >\r\n            <div className='my-auto mx-auto items-center justify-center pl-2 '>\r\n               <img\r\n                  className='mt-3 max-w-lg lg:h-20 lg:w-20 md:h-16 md:w-16 w-32 h-32 rounded-full object-cover'\r\n                  src={`${candidate.url}`}\r\n               />\r\n               <h5 className='text-gray-900 lg:text-lg md:text-md text-center font-medium mb-2'>\r\n                  {candidate.name}\r\n               </h5>\r\n            </div>\r\n\r\n            <div className='py-4 px-2 flex flex-col justify-start md:max-w-l lg:max-w-md'>\r\n               <p className='text-gray-700 mb-4 text-sm'>\r\n                  {candidate.description}\r\n               </p>\r\n               <div className='inline-flex'>\r\n                  <p\r\n                     className={`${!isDraw && id === 0 && 'text-indigo-700'} ${\r\n                        isDraw && id === 0 && 'text-indigo-900'\r\n                     } ${id !== 0 && 'text-black'}\r\n                      text-lg bold`}\r\n                  >\r\n                     Votes:{candidate.votes}\r\n                  </p>\r\n                  {id === 0 && !isDraw && candidate.votes > 0 && (\r\n                     <p className='flex text-indigo-700 text-lg bold ml-auto pr-4'>Winner</p>\r\n                  )}\r\n                  {id === 0 && isDraw && (\r\n                     <p className='flex text-indigo-900 text-lg bold ml-auto pr-4'>Draw</p>\r\n                  )}\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      // <tr>\r\n      //    <td className='px-6 py-4 whitespace-nowrap'>\r\n      //       <div className='flex items-center'>\r\n      //          <div className='flex-shrink-0 h-10 w-10'>\r\n      //             <img\r\n      //                className='h-10 w-10 rounded-full object-cover'\r\n      //                src={`${candidate.url}`}\r\n      //                alt=''\r\n      //             />\r\n      //          </div>\r\n      //          <div className='text-sm font-medium text-gray-700 px-2'>{candidate.name}</div>\r\n      //       </div>\r\n      //    </td>\r\n      //    <td className='px-6 py-4 whitespace-nowrap'>\r\n      //       <div className='text-xs text-gray-900 ml-3'>{candidate.votes}</div>\r\n      //    </td>\r\n      //    <td className='px-6 py-4 whitespace-nowrap '>\r\n      //       <div className='text-xs text-gray-900 ml-3'>{id + 1}</div>\r\n      //    </td>\r\n      //    <td className='px-3 py-4 whitespace-nowrap'>\r\n      //       <span\r\n      //          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full  ${\r\n      //             !isDraw ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'\r\n      //          }`}\r\n      //       >\r\n      //          {id === 0 && !isDraw && candidate.votes > 0 && <>Winner</>}\r\n      //          {id === 0 && isDraw && <>Draw</>}\r\n      //       </span>\r\n      //    </td>\r\n\r\n      //{/* <td>{candidate.name}</td>\r\n      // <td>{candidate.description}</td>\r\n      // <td>{candidate.votes}</td>\r\n      // {id === 0 && !isDraw && candidate.votes > 0 && (\r\n      //    <td>\r\n      //       <b>Winner</b>\r\n      //    </td>\r\n      // )}\r\n      // {isDraw && (\r\n      //    <td>\r\n      //       <b>Draw</b>\r\n      //    </td>\r\n      // )} */}\r\n      // </tr>\r\n   );\r\n};\r\nexport default ShowResult;\r\n","D:\\Blockchain Ballot\\frontend\\src\\pages\\AllUsers\\ShowUser.js",["159"],"import axios from 'axios';\r\nimport { useContext } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nconst ShowUser = ({ id, user, setLoading, loading, setUsers }) => {\r\n   const { notify } = useContext(AuthContext);\r\n   const deleteUserHandler = async (e) => {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      try {\r\n         //deleting user\r\n         await axios.delete(`/election/delete/${id}`, {\r\n            withCredentials: true,\r\n         });\r\n         //retriving new user list\r\n         const response = await axios.get('/election/allUsers', {\r\n            withCredentials: true,\r\n         });\r\n         setUsers(response.data.users);\r\n         notify('User has been deleted', 'success');\r\n      } catch (err) {\r\n         notify(err.response.date.errMessage, 'error');\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {!loading && (\r\n            <tr>\r\n               <td className='px-6 py-4 whitespace-nowrap'>\r\n                  <div className='flex items-center'>\r\n                     <div className=''>\r\n                        <div className='text-sm font-medium text-gray-900'>{user.name}</div>\r\n                        <div className='text-sm text-gray-500'>{user.email}</div>\r\n                     </div>\r\n                  </div>\r\n               </td>\r\n               <td className='px-6 py-4 whitespace-nowrap '>\r\n                  <div className='text-xs text-gray-900'>{user.eAddress}</div>\r\n               </td>\r\n               <td className='px-5 py-4 whitespace-nowrap'>\r\n                  <span\r\n                     className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full  ${\r\n                        user.hasVoted ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n                     }`}\r\n                  >\r\n                     {user.hasVoted && <>Voted</>}\r\n                     {!user.hasVoted && <>Not voted</>}\r\n                  </span>\r\n               </td>\r\n               <td className='px-3 py-4 whitespace-nowrap text-sm text-gray-500'>{user.role}</td>\r\n               {!user.electionOngoing && (\r\n                  <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\r\n                     <a onClick={deleteUserHandler} className='text-red-600 hover:text-red-900'>\r\n                        Delete\r\n                     </a>\r\n                  </td>\r\n               )}\r\n            </tr>\r\n         )}\r\n      </>\r\n   );\r\n};\r\nexport default ShowUser;\r\n","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\get-results.js",["160"],"/**\r\n * @prettier\r\n */\r\n\r\n/*hook to get results\r\nthis hook is needed as we will use in allResults page and in context store\r\nUsing it in context store ensusre that /electio/:address only displays if the \r\nelection address was created using our currentFactory contract address\r\n\r\n*/\r\n\r\nimport { useEffect, useContext } from 'react';\r\nimport Factory from '../../ethereum/factory';\r\nimport AuthContext from '../../store/auth-context';\r\nexport const useGetResults = (setLoading) => {\r\n   const { setResults, setNames, notify } = useContext(AuthContext);\r\n\r\n   useEffect(() => {\r\n      const b = async () => {\r\n         setLoading(true);\r\n         //get all results\r\n         try {\r\n            let electionResults = await Factory.methods.getAllResults().call();\r\n            let electionNames = await Factory.methods.getAllName().call();\r\n            setResults(electionResults);\r\n            setNames(electionNames);\r\n         } catch (err) {\r\n            notify(err.message, 'error');\r\n         }\r\n         setLoading(false);\r\n      };\r\n      b();\r\n      return () => b;\r\n   }, []);\r\n};\r\n","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\end-election.js",["161"],"/**\r\n * @prettier\r\n */\r\nimport { useContext, useEffect } from 'react';\r\nimport Electioneth from '../../ethereum/election';\r\nimport Factory from '../../ethereum/factory';\r\nimport web3 from '../../ethereum/web3';\r\nimport { useNavigate } from 'react-router';\r\nimport axios from 'axios';\r\nimport AuthContext from '../../store/auth-context';\r\n\r\nexport const useEndElection = (page, setLoading) => {\r\n   const navigate = useNavigate();\r\n   const { notify, election, setUser, setElection } = useContext(AuthContext);\r\n   //use effect to remove bug where user rejects second transaction while ending election\r\n   useEffect(() => {\r\n      (async () => {\r\n         if (election !== '0x0000000000000000000000000000000000000000') {\r\n            setLoading(true);\r\n            const Election = Electioneth(election);\r\n            const accounts = await web3.eth.getAccounts();\r\n            let started = await Election.methods.started().call();\r\n            let ended = await Election.methods.ended().call();\r\n            //checking if correct election has ended\r\n            if (!started && ended) {\r\n               //removing election from factory\r\n               try {\r\n                  await Factory.methods.clearFactory().send({\r\n                     from: accounts[0],\r\n                  });\r\n                  notify('Election has ended', 'success');\r\n               } catch (err) {\r\n                  notify('You need to end the election to proceed', 'error');\r\n                  navigate('/');\r\n                  return;\r\n               }\r\n\r\n               //changing electionOngoing to false and hasVoted to false\r\n               try {\r\n                  setLoading(true);\r\n                  await axios.put(\r\n                     '/election/endElection',\r\n                     {\r\n                        address: election,\r\n                     },\r\n                     {\r\n                        withCredentials: true,\r\n                     }\r\n                  );\r\n                  //get updated user back\r\n                  const response = await axios.get('/election/getUser', {\r\n                     withCredentials: true,\r\n                  });\r\n                  console.log(response.data.user);\r\n                  setUser(response.data.user);\r\n                  setElection('0x0000000000000000000000000000000000000000');\r\n                  if (page === 'election') navigate(`/`);\r\n                  else navigate('/election');\r\n               } catch (err) {\r\n                  notify(err.response.data.errMessage, 'error');\r\n                  setLoading(false);\r\n                  return;\r\n               }\r\n            }\r\n            setLoading(false);\r\n         }\r\n      })();\r\n   }, []);\r\n};\r\n","D:\\Blockchain Ballot\\frontend\\src\\components\\hooks\\user-validation.js",["162"],"/**\r\n * @prettier\r\n */\r\nimport { useEffect, useContext } from 'react';\r\nimport AuthContext from '../../store/auth-context';\r\nimport { useNavigate } from 'react-router';\r\nexport const useUserValidation = (electionStarted) => {\r\n   const { user, notify, election, getAccount } = useContext(AuthContext);\r\n   const navigate = useNavigate();\r\n   useEffect(() => {\r\n      if (!user) {\r\n         notify('Please login first', 'error');\r\n         navigate('/login');\r\n      } else {\r\n         if (user.role !== 'admin') {\r\n            notify('You do not have access to this route', 'error');\r\n            navigate(-1);\r\n            return;\r\n         }\r\n         //checking if there is an ongoing election\r\n         if (user.electionOngoing === true) {\r\n            notify('There is already an election in progress', 'error');\r\n            navigate(-1);\r\n            return;\r\n         }\r\n         //this condition is for /addElection\r\n         if (!electionStarted) {\r\n            if (election !== '0x0000000000000000000000000000000000000000') {\r\n               notify('You have already started an election', 'error');\r\n               navigate(-1);\r\n            }\r\n         }\r\n         //this condition is for /addCandidate\r\n         if (electionStarted) {\r\n            if (election === '0x0000000000000000000000000000000000000000') {\r\n               notify('You need to start and election first', 'error');\r\n               navigate('/addElection');\r\n            }\r\n         }\r\n         // getAccount() compares the address stored in user with etheremum account address of user\r\n         // it sets intial value of valid account\r\n         getAccount();\r\n      }\r\n   }, [user]);\r\n};\r\n",{"ruleId":"163","severity":1,"message":"164","line":9,"column":8,"nodeType":"165","messageId":"166","endLine":9,"endColumn":15},{"ruleId":"167","severity":1,"message":"168","line":112,"column":7,"nodeType":"169","messageId":"170","endLine":126,"endColumn":8},{"ruleId":"163","severity":1,"message":"171","line":2,"column":22,"nodeType":"165","messageId":"166","endLine":2,"endColumn":30},{"ruleId":"163","severity":1,"message":"172","line":13,"column":4,"nodeType":"165","messageId":"166","endLine":13,"endColumn":18},{"ruleId":"163","severity":1,"message":"173","line":14,"column":4,"nodeType":"165","messageId":"166","endLine":14,"endColumn":14},{"ruleId":"163","severity":1,"message":"172","line":13,"column":4,"nodeType":"165","messageId":"166","endLine":13,"endColumn":18},{"ruleId":"163","severity":1,"message":"173","line":14,"column":4,"nodeType":"165","messageId":"166","endLine":14,"endColumn":14},{"ruleId":"174","severity":1,"message":"175","line":80,"column":4,"nodeType":"165","endLine":80,"endColumn":13,"suggestions":"176"},{"ruleId":"174","severity":1,"message":"177","line":62,"column":29,"nodeType":"178","endLine":68,"endColumn":14},{"ruleId":"163","severity":1,"message":"179","line":12,"column":10,"nodeType":"165","messageId":"166","endLine":12,"endColumn":18},{"ruleId":"174","severity":1,"message":"180","line":43,"column":7,"nodeType":"181","endLine":43,"endColumn":9,"suggestions":"182"},{"ruleId":"174","severity":1,"message":"183","line":75,"column":7,"nodeType":"181","endLine":75,"endColumn":9,"suggestions":"184"},{"ruleId":"163","severity":1,"message":"185","line":4,"column":22,"nodeType":"165","messageId":"166","endLine":4,"endColumn":31},{"ruleId":"163","severity":1,"message":"186","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":21},{"ruleId":"163","severity":1,"message":"187","line":13,"column":18,"nodeType":"165","messageId":"166","endLine":13,"endColumn":24},{"ruleId":"188","severity":1,"message":"189","line":32,"column":19,"nodeType":"190","endLine":35,"endColumn":21},{"ruleId":"163","severity":1,"message":"191","line":21,"column":11,"nodeType":"165","messageId":"166","endLine":21,"endColumn":15},{"ruleId":"174","severity":1,"message":"192","line":29,"column":7,"nodeType":"181","endLine":29,"endColumn":9,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":7,"column":1,"nodeType":"196","endLine":9,"endColumn":3},{"ruleId":"163","severity":1,"message":"197","line":10,"column":10,"nodeType":"165","messageId":"166","endLine":10,"endColumn":14},{"ruleId":"163","severity":1,"message":"198","line":13,"column":18,"nodeType":"165","messageId":"166","endLine":13,"endColumn":30},{"ruleId":"163","severity":1,"message":"179","line":15,"column":10,"nodeType":"165","messageId":"166","endLine":15,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":76,"column":19,"nodeType":"190","endLine":79,"endColumn":21},{"ruleId":"163","severity":1,"message":"198","line":12,"column":36,"nodeType":"165","messageId":"166","endLine":12,"endColumn":48},{"ruleId":"163","severity":1,"message":"199","line":12,"column":72,"nodeType":"165","messageId":"166","endLine":12,"endColumn":82},{"ruleId":"163","severity":1,"message":"171","line":5,"column":22,"nodeType":"165","messageId":"166","endLine":5,"endColumn":30},{"ruleId":"163","severity":1,"message":"198","line":11,"column":36,"nodeType":"165","messageId":"166","endLine":11,"endColumn":48},{"ruleId":"163","severity":1,"message":"199","line":11,"column":59,"nodeType":"165","messageId":"166","endLine":11,"endColumn":69},{"ruleId":"188","severity":1,"message":"189","line":15,"column":16,"nodeType":"190","endLine":18,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":54,"column":22,"nodeType":"190","endLine":54,"endColumn":97},{"ruleId":"174","severity":1,"message":"202","line":34,"column":7,"nodeType":"181","endLine":34,"endColumn":9,"suggestions":"203"},{"ruleId":"174","severity":1,"message":"204","line":68,"column":7,"nodeType":"181","endLine":68,"endColumn":9,"suggestions":"205"},{"ruleId":"174","severity":1,"message":"206","line":44,"column":7,"nodeType":"181","endLine":44,"endColumn":13,"suggestions":"207"},"no-unused-vars","'SideBar' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","'AiFillLinkedin' is defined but never used.","'AiFillMail' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDisable'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user, seconds, navigate] as a second argument to the useEffect Hook.",["208"],"Assignments to the 'tempCandidate' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","'navigate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'notify' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["209"],"React Hook useEffect has missing dependencies: 'address', 'isDraw', 'navigate', 'notify', and 'results'. Either include them or remove the dependency array.",["210"],"'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'notify' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'link' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate', 'notify', and 'user'. Either include them or remove the dependency array.",["211"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Link' is defined but never used.","'validAccount' is assigned a value but never used.","'getAccount' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'notify', 'setLoading', 'setNames', and 'setResults'. Either include them or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["212"],"React Hook useEffect has missing dependencies: 'election', 'navigate', 'notify', 'page', 'setElection', 'setLoading', and 'setUser'. Either include them or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],"React Hook useEffect has missing dependencies: 'election', 'electionStarted', 'getAccount', 'navigate', and 'notify'. Either include them or remove the dependency array.",["214"],{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},"Add dependencies array: [user, seconds, navigate]",{"range":"229","text":"230"},"Update the dependencies array to be: [notify, user]",{"range":"231","text":"232"},"Update the dependencies array to be: [address, isDraw, navigate, notify, results]",{"range":"233","text":"234"},"Update the dependencies array to be: [navigate, notify, user]",{"range":"235","text":"236"},"Update the dependencies array to be: [notify, setLoading, setNames, setResults]",{"range":"237","text":"238"},"Update the dependencies array to be: [election, navigate, notify, page, setElection, setLoading, setUser]",{"range":"239","text":"240"},"Update the dependencies array to be: [election, electionStarted, getAccount, navigate, notify, user]",{"range":"241","text":"242"},[2638,2638],", [user, seconds, navigate]",[1538,1540],"[notify, user]",[2652,2654],"[address, isDraw, navigate, notify, results]",[1093,1095],"[navigate, notify, user]",[1076,1078],"[notify, setLoading, setNames, setResults]",[2695,2697],"[election, navigate, notify, page, setElection, setLoading, setUser]",[1660,1666],"[election, electionStarted, getAccount, navigate, notify, user]"]